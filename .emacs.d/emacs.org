#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* About

This file generates init.el, which can be loaded by Emacs at startup.
*Work In Progress.*

* System Specific Settings
:PROPERTIES:
:ID:       e8b5f6db-329a-43e9-b7a1-911ca1d089ab
:END:

Here variables shall be set, which will be used throughout the config to set system specific values.

#+begin_src emacs-lisp

(defvar kk/default-font-size 150)
(defvar kk/default-diary-file "")
(defvar kk/personal-journal "")
(defvar kk/personal-diary-file "")
(defvar kk/personal-agenda-file "")
(defvar kk/personal-daily-todo-file "")
(defvar kk/work-diary-file "")
(defvar kk/work-agenda-file "")
(defvar kk/work-daily-todo-file "")
(defvar kk/academical-diary-file "")
(defvar kk/academical-agenda-file "")
(defvar kk/diary-files ())
(defvar kk/org-agenda-files '())

(pcase system-name
  ("dwhpd"
   (setq kk/default-font-size 140)
   (setq kk/default-diary-file "/tmp/diary")
   (setq kk/work-diary-file "~/nextcloud_work/Documents/org/workdiary")
   (setq kk/work-agenda-file "~/nextcloud_work/Documents/org/workAgenda.org")
   (setq kk/work-daily-todo-file "~/nextcloud_work/Documents/org/2021.org")
   (setq kk/academical-diary-file "~/nextcloud_work/Documents/org/schuldiary")
   (setq kk/academical-agenda-file "~/nextcloud_work/schule/schule.org")
   (setq kk/diary-files (list kk/work-diary-file
                              kk/academical-diary-file))
   (setq kk/org-agenda-files (list
                              kk/academical-agenda-file
                              "~/nextcloud_work/Documents/org/standups.org"
                              kk/work-agenda-file)))
  ("T490s"
   (setq kk/default-font-size 180)
   (setq kk/default-diary-file "/tmp/diary")
   (setq kk/personal-journal "~/Nextcloud/Documents/org/journal.org.gpg")
   (setq kk/personal-diary-file "~/Nextcloud/Documents/org/diary")
   (setq kk/personal-agenda-file "~/Nextcloud/Documents/org/personal.org.gpg")
   (setq kk/personal-daily-todo-file "~/Nextcloud/Documents/org/2021.org")
   (setq kk/work-diary-file "~/nextcloud_work/Documents/org/workdiary")
   (setq kk/work-agenda-file "~/nextcloud_work/Documents/org/workAgenda.org")
   (setq kk/work-daily-todo-file "~/nextcloud_work/Documents/org/2021.org")
   (setq kk/academical-diary-file "~/nextcloud_work/Documents/org/schuldiary")
   (setq kk/academical-agenda-file "~/nextcloud_work/schule/schule.org")
   (setq kk/diary-files (list kk/personal-diary-file
                              kk/work-diary-file
                              kk/academical-diary-file))
   (setq kk/org-agenda-files (list
                              kk/personal-agenda-file
                              kk/academical-agenda-file
                              "~/nextcloud_work/Documents/org/standups.org"
                              kk/work-agenda-file
                              "~/tasks.org"))))

#+end_src

* Startup Performance
:PROPERTIES:
:ID:       f9c539f0-90e3-4b9a-adbc-1098beba2d08
:END:

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun kk/display-startup-time ()
  "Display the time it took to load Emacs to the Messages buffer.
Also displays the number of garbage collections which occured."
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'kk/display-startup-time)

#+end_src

* Package System Setup
:PROPERTIES:
:ID:       9098e83f-8fe9-41cd-be54-815d2b2f8635
:END:

Emacs has a built in package manager but it doesn’t make it easy to automatically install packages on a new system the first time you pull down your configuration. use-package is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

Installation problems seem to often get fixed by executing =package-refresh-contents=.

#+begin_src emacs-lisp

(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;;initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose t)

#+end_src

** Automatic Package Updates
:PROPERTIES:
:ID:       f1f58cde-959f-4825-91fa-77e60c7ef26a
:END:

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

#+end_src

* UI Configuration
** General
:PROPERTIES:
:ID:       c6e9780a-5327-4d80-be76-5b4bedbbef61
:END:

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)
(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

(dolist (mode '(treemacs-mode-hook
                calendar-mode-hook
                ledger-report-mode-hook
                ledger-reconcile-mode-hook
                cfw:calendar-mode-hook
                image-mode-hook
                org-agenda-mode-hook
                doc-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Themes
:PROPERTIES:
:ID:       7f73149b-9504-443d-abfa-71fedfcfb54e
:END:

#+begin_src emacs-lisp

(use-package doom-themes)
(load-theme 'doom-dracula t)

#+end_src

** Font Configuration
:PROPERTIES:
:ID:       7a99b405-cbd6-477c-bdec-f594e3883d89
:END:

#+begin_src emacs-lisp

(defun kk/set-font-faces ()
  "Set font faces.
This function can be called to set the faces after making a frame,
in case Emacs daemon is used."
  (message "Settings faces!")
  (set-face-attribute 'default nil :height kk/default-font-size))

(defun kk/org-font-setup ()
  "Set `org-mode' specific font settings."
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1)
                                                          (match-end 1) "•")))))))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame (kk/set-font-faces)
                                     (kk/org-font-setup))))
  (kk/set-font-faces)
  (kk/org-font-setup))

#+end_src

** Better Modeline
:PROPERTIES:
:ID:       cf72fef8-5624-4d3e-951b-d5e3c7e3a171
:END:

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.
[[https://github.com/seagle0128/doom-modeline#customize][Configuration options]]

#+begin_src emacs-lisp

;; NOTE: The first time you load your configuration on a new machine, you'll
;; need to run the following command interactively so that mode line icons
;; display correctly :
;;
;; M-x all-the-icons-install-fonts
(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-hight 10))

#+end_src

** Which Key
:PROPERTIES:
:ID:       a35ee047-c0de-44ea-80d4-b17e49190274
:END:
#+begin_src emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

#+end_src
** Ivy and Counsel
:PROPERTIES:
:ID:       5b7e1d41-6e02-4659-a5cb-a31f188cba6f
:END:

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("M-s s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x r b" . counsel-bookmark)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)) ; don't start searches with ^

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

#+end_src

*** Improved Candidate Sorting with prescient.el
:PROPERTIES:
:ID:       7dcf01cb-4940-4c49-8010-5b372f0c8502
:END:

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))

#+end_src
** Helpful Package
:PROPERTIES:
:ID:       c07792fe-8800-4766-8d7f-a7e96ada27d4
:END:

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-descrive-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Command Log Mode
:PROPERTIES:
:ID:       3a4922ed-9f78-4fa3-9e12-956b31b6fedf
:END:

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.

#+begin_src emacs-lisp

(use-package command-log-mode
  :commands command-log-mode)

#+end_src
** Recent Files
:PROPERTIES:
:ID:       9ac43bf7-a269-4fac-8ca4-aa648656a180
:END:

#+begin_src emacs-lisp

(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key "\C-c\ \C-r" 'recentf-open-files)

#+end_src
** Calendar
:PROPERTIES:
:ID:       1e8bd390-7d28-40b8-ae80-78a38454a0b5
:END:

#+begin_src emacs-lisp
(use-package calendar
  :defer t
  :config
  (setq calendar-week-start-day 1))
#+end_src

** Window Numbering
:PROPERTIES:
:ID:       af8cd94d-966b-4ee1-8e61-15b721d522ea
:END:

#+begin_src emacs-lisp

(use-package window-numbering
  :config
  (window-numbering-mode))

#+end_src

** Registers
:PROPERTIES:
:ID:       433bafe4-ea43-4178-9c31-f3ad7ab54610
:END:

#+begin_src emacs-lisp

(setq register-preview-delay 0)

#+end_src

* Org Mode
** Basic
:PROPERTIES:
:ID:       83c77eee-de0a-450d-ae1f-e3a97851dfdf
:END:

#+begin_src emacs-lisp

(defun kk/org-mode-setup ()
  "Set org-specific settings.
Intended to be used in an `org-mode-hook'."
  (visual-line-mode 1)
  (setq-local display-line-numbers-type t))

(use-package org
  :hook (org-mode . kk/org-mode-setup)
  :custom (org-agenda-include-diary t)
  :config
  (setq org-startup-folded 'nofold)
  (setq org-edit-src-content-indentation 0)
  (setq org-indent-indentation-per-level 3)
  (setq org-startup-indented t)
  (setq org-ellipsis " ⤵")
  (setq org-image-actual-width 500)
  (setq org-log-done 'note)
  (setq org-log-reschedule 'note)
  (setq org-log-into-drawer t)
  (setq org-clock-into-drawer "CLOCKING")
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-enforce-todo-dependencies t)
  (setq org-track-ordered-property-with-tag t)
  (setq org-agenda-dim-blocked-tasks 't)
  (setq org-sort-agenda-noeffort-is-high nil)
  (setq org-global-properties
        `(("Effort_ALL" .
           ,(concat "0 0:10 0:20 0:30 0:45 1:00 1:30 2:00 3:00 "
                    "6:00"))))
  (setq org-columns-default-format
        (concat "#+COLUMNS: %7CATEGORY(Cat.) %7TODO(Todo) %40ITEM(Task) %TAGS(Tag) "
                "%6CLOCKSUM(Clock) %6EFFORT(Effort){:}"))
  (setq org-agenda-files kk/org-agenda-files)
  (setq org-refile-targets '((kk/org-agenda-files :maxlevel . 3)))
  (setq org-capture-templates
        `(("w" "Work")
          ("wt" "Task" entry (file+olp kk/work-agenda-file "Inbox")
           "* TODO %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)
          ("wp" "Project" entry (file+olp kk/work-agenda-file "Inbox")
           "* PLAN %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)

          ("p" "Personal")
          ("pt" "Task" entry (file+olp kk/personal-agenda-file "Inbox")
           "* TODO %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)
          ("pp" "Project" entry (file+olp kk/personal-agenda-file "Inbox")
           "* PLAN %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)

          ("j" "Journal" entry
           (file+olp+datetree kk/personal-journal)
           "\n* %<%H:%M> Uhr\n\n%?\n\n"
           :clock-in :clock-resume :empty-lines 1)

          ("b" "Books" entry
           (file+olp kk/personal-agenda-file "Bücher")
           "* %^{Description}\n:PROPERTIES:\n- Pages: %^{Pages}\n- Genre: %^{Genre}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:\n- Recommended by %^{Recommended By}")

          ("wT" "Todays Work TODOs" plain
           (file+olp+datetree kk/work-daily-todo-file)
           (function kk/todays-work-todos)
           :immediate-finish t :empty-lines 0 :jump-to-captured t)
          ("pT" "Todays Personal TODOs" plain
           (file+olp+datetree kk/personal-daily-todo-file)
           (function kk/todays-personal-todos)
           :immediate-finish t :empty-lines 0 :jump-to-captured t)

          ("a" "Academical")
          ("at" "Task" entry (file+olp kk/academical-agenda-file "Inbox")
           "* TODO %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)
          ("ah" "Homework" entry (file+olp kk/academical-agenda-file "Inbox")
           "* HOMEWORK %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)
          ("ae" "Exam" entry (file+olp kk/academical-agenda-file "Inbox")
           "* EXAM %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)
          ("as" "Submission" entry (file+olp kk/academical-agenda-file "Inbox")
           "* SUBMISSION %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
           :empty-lines 0)))

  (define-key org-mode-map (kbd "C-c i r")
    (lambda () (interactive) (org-table-insert-row)))
  (define-key org-mode-map (kbd "C-c C-x h")
    (lambda () (interactive) (org-hide-entry)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil)))
  (kk/org-font-setup))

(use-package org-bullets
  :after org
  :hook
  (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


(advice-add 'org-refile :after 'org-save-all-org-buffers)

#+end_src

** Todo Keywords
:PROPERTIES:
:ID:       16687884-c8f0-4268-828e-22e9ee9d63a2
:END:

#+begin_src emacs-lisp

(setq org-todo-keywords
      '((sequence "TODO(t@/!)" "NEXT(n!/!)" "TODAY(j!/!)" "PROG(r@/!)" "|" "DONE(d@/!)")
        (sequence "BACKLOG(b@/!)" "PLAN(p@/!)" "READY(r@/!)" "ACTIVE(a@/!)" "REVIEW(v@/!)" "WAIT(w@/!)" "HOLD(h@/!)" "SOMEDAY(o@/!)" "|" "COMPLETED(c@)" "CANC(k@)")))

#+end_src

** Tags
:PROPERTIES:
:ID:       701d2d71-4e74-43c3-a7e2-48943b3dbdc3
:END:

#+begin_src emacs-lisp

(setq org-tag-alist '(("urgent" . ?u) ("important" . ?i)))

#+end_src

** Custom Agenda Views
*** Reusable Blocks
:PROPERTIES:
:ID:       ff0f947f-f3ac-4d41-827a-0e417cf98c99
:END:

#+begin_src emacs-lisp

(setq kk/org-agenda-next-block
      '(todo "NEXT"
             ((org-agenda-overriding-header "Next Tasks"))))

(setq kk/org-agenda-active-block
      '(todo "ACTIVE"
             ((org-agenda-overriding-header "Active Projects"))))

(setq kk/org-agenda-unscheduled-todos
      '(todo "TODO"
             ((org-agenda-overriding-header "Unscheduled TODOs")
              (org-agenda-todo-ignore-with-date t))))

#+end_src

*** Commands
:PROPERTIES:
:ID:       80f852cd-bd61-43b1-97f2-c1fcd91a8360
:END:

#+begin_src emacs-lisp

(setq org-agenda-custom-commands
      `(("d" "Deadlines"
         ((agenda ""
                  ((org-deadline-warning-days 365)
                   (org-agenda-span 1)
                   (org-agenda-show-all-dates nil)))
          (agenda ""
                  ((org-agenda-span 'year))))
         ((org-agenda-start-with-log-mode nil)
          (org-deadline-warning-days 0)
          (org-agenda-include-diary nil)
          (org-agenda-entry-types '(:deadline))))

        ("w" . "Weekly Review Helper")
        ("wt" "TODO these"
         ((todo "SOMEDAY"
                ((org-agenda-overriding-header "SOMEDAYs"))))
         ((org-agenda-start-with-follow-mode t)))
        ("wa" "Archive These"
         ((todo "DONE"
                ((org-agenda-overriding-header "Done Tasks"))))
         ((org-agenda-start-with-follow-mode t)
          (org-agenda-start-with-log-mode nil)))

        ("wn" "Set To NEXT"
         ((todo "TODO"
                ((org-agenda-overriding-header "Unscheduled TODOs")
                 (org-agenda-todo-ignore-with-date t))))
         ((org-agenda-start-with-follow-mode t)
          (org-agenda-start-with-log-mode nil)))

        ("we" "Estimate These"
         ((todo "NEXT"
                ((org-agenda-overriding-header
                  "Scheduled NEXT (maybe filter via s e)")
                 (org-agenda-span 'week)
                 (org-agenda-skip-scheduled-if-done t)
                 (org-agenda-entry-types '(:scheduled)))))
         ((org-agenda-start-with-follow-mode t)
          (org-agenda-start-with-log-mode nil)))

        ("ws" "Schedule These"
         ((todo "NEXT"
                ((org-agenda-overriding-header "Unscheduled NEXT")
                 (org-agenda-start-on-weekday nil)
                 (org-agenda-span 8)
                 (org-agenda-todo-ignore-scheduled t)))
          (agenda ""
                  ((org-agenda-span 'week)
                   (org-agenda-skip-deadline-prewarning-if-scheduled)
                   (org-agenda-start-on-weekday nil))))
         ((org-agenda-start-with-follow-mode t)
          (org-agenda-start-with-log-mode nil)))

        ("r" . "Review Past")
        ("rd" "Review by Day"
         ((agenda ""
                  ((org-agenda-entry-types '())
                   (org-agenda-time-grid nil)
                   (org-agenda-archives-mode t)
                   (org-agenda-include-diary t)
                   (org-agenda-span 1))))
         ((org-agenda-start-with-log-mode t)))
        ("rw" "Review by Week"
         ((agenda ""
                  ((org-agenda-entry-types '())
                   (org-agenda-time-grid nil)
                   (org-agenda-archives-mode t)
                   (org-agenda-include-diary t)
                   (org-agenda-span 'week))))
         ((org-agenda-start-with-log-mode t)))
        ("rm" "Review by Month"
         ((agenda ""
                  ((org-agenda-entry-types '())
                   (org-agenda-time-grid nil)
                   (org-agenda-archives-mode t)
                   (org-agenda-include-diary)
                   (org-agenda-span 'month))))
         ((org-agenda-start-with-log-mode t)))
        ("rs" "Review by Day including state"
         ((agenda ""
                  ((org-agenda-entry-types '())
                   (org-agenda-time-grid nil)
                   (org-agenda-archives-mode t)
                   (org-agenda-include-diary t)
                   (org-agenda-span 1))))
         ((org-agenda-start-with-log-mode t)
          (org-agenda-log-mode-items '(closed clock state))))

        ("h" "Today"
         ((todo "TODAY"
                ((org-agenda-overriding-header "Work on these today")))
          (todo "NEXT"
                ((org-agenda-overriding-header "Next Tasks")))))

        ("p" "Projects Status"
         (,kk/org-agenda-active-block
          (todo "WAIT"
                ((org-agenda-overriding-header "Waiting on External")))
          (todo "REVIEW"
                ((org-agenda-overriding-header "In Review")))
          (todo "PLAN"
                ((org-agenda-overriding-header "In Planning")))
          (todo "BACKLOG"
                ((org-agenda-overriding-header "Project Backlog")))
          (todo "READY"
                ((org-agenda-overriding-header "Ready for Work")))
          (todo "COMPLETED"
                ((org-agenda-overriding-header "Completed Projects")))
          (todo "CANC"
                ((org-agenda-overriding-header "Cancelled Projects")))))))

#+end_src

** Structure Templates
:PROPERTIES:
:ID:       6f69a4a3-b1e6-4539-9cda-c1d57d4fa132
:END:

#+begin_src emacs-lisp

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

#+end_src

** Babel
:PROPERTIES:
:ID:       52b21da5-c0ea-4f02-b5d1-68dd24822ea8
:END:

Don't prompt eval confirmation

#+begin_src emacs-lisp

(setq org-confirm-babel-evaluate nil)

#+end_src

*** Auto-tangle Configuration Files
:PROPERTIES:
:ID:       aab79177-8676-414e-9a9a-ba7a55b16d8b
:END:

#+begin_src emacs-lisp

(defun kk/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'kk/org-babel-tangle-config)))
#+end_src
*** Configure Languages
:PROPERTIES:
:ID:       410e9e2a-90e0-4c3c-b485-5233286a9714
:END:

#+begin_src emacs-lisp

(org-babel-do-load-languages
 'arg-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Package for TOC
:PROPERTIES:
:ID:       deec8c0f-9552-4e55-a65b-d1719975e174
:END:

#+begin_src emacs-lisp

(use-package toc-org
  :hook (org-mode-hook . toc-org-mode))

#+end_src
** Diary
:PROPERTIES:
:ID:       bd4efe9a-2561-497e-9fab-2e638e08011c
:END:

#+begin_src emacs-lisp

(setq diary-file kk/default-diary-file)

#+end_src

** Skeletons
:PROPERTIES:
:ID:       70e00c63-054b-4664-8f24-5293c514f198
:END:

#+begin_src emacs-lisp

(define-skeleton kk/test-skeleton
  "This is some test skeleton" nil
  "#+TITLE: Some test Title\n"
  "#+AUTHOR: Karsten Klöss\n")

#+end_src

** Org ID
:PROPERTIES:
:ID:       499c189e-01cc-4993-970c-27f6f300a9ff
:END:

#+begin_src emacs-lisp

(require 'org-id)
(setq org-id-link-to-org-use-id t)

#+end_src

** Holidays Like Weekends
:PROPERTIES:
:ID:       68549608-f074-4ab2-98e7-3cb927d8854c
:END:
Code taken from [[https://lists.gnu.org/archive/html/emacs-orgmode/2010-11/msg00542.html][here]].

#+begin_src emacs-lisp

(setq org-agenda-day-face-function
      (defun kk/org-agenda-day-face-holidays-function (date)
        "Compute DATE face for holidays."
        (unless (org-agenda-todayp date)
          (dolist (file (org-agenda-files nil 'ifmode))
            (let ((face
                   (dolist (entry (org-agenda-get-day-entries file date))
                     (let ((category (with-temp-buffer
                                       (insert entry)
                                       (org-get-category (point-min)))))
                       (when (or (string= "Holidays" category)
                                 (string= "Vacation" category)
                                 (string= "Urlaub" category)
                                 (string= "Feiertage" category))
                         (return 'org-agenda-date-weekend))))))
              (when face (return face)))))))

#+end_src

#+begin_src emacs-lisp

(set-face-attribute
 'org-agenda-date-weekend nil :foreground "#E10500" :weight 'ultra-bold)

#+end_src

** Pomororo
:PROPERTIES:
:ID:       3d78b0bd-72a8-4f42-8dd5-21cf8a9c10c8
:END:
[[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro on github]]

#+begin_src emacs-lisp

(use-package org-pomodoro)

#+end_src

*** Usage

1. Move point to a task as you would do with org-clock-in. Call
   org-pomodoro the task will be clocked-in.
2. When there's time for break, the task will be org-clock-out'ed
3. If you call org-pomodoro during a pomodoro, you'll be asked to
   reset a pomodoro.
4. If you call org-pomodoro outside org-mode, you'll be presented with
   list of recent tasks, as C-u org-clock-in would.

* Development
** Commenting
:PROPERTIES:
:ID:       8652450b-b48e-4cb6-a0bc-7db9e7f1768f
:END:

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :defer t
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Languages
*** IDE Features with lsp-mode

[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode (homepage)]] and the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][languages part]] of said homepage.

To use lsp-mode for any language, check the above places first.
You'll likely need to install a corresponding mode and language server outside on your system.

**** Lsp-Mode
:PROPERTIES:
:ID:       d30198e0-eb14-45b7-94b0-2e4b377839e9
:END:

See [[https://github.com/emacs-lsp/lsp-mode/][lsp-mode (Github)]]

Installation of lsp-mode likes to fail because were not able to install the "spinner" package. Running ~M-x package-refresh-contents~ seems to fix this. Maybe not.

#+begin_src emacs-lisp

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

#+end_src

***** Header Breadcrumb
:PROPERTIES:
:ID:       c5021796-0aee-4441-afa3-ea19822a801c
:END:

#+begin_src emacs-lisp
(defun kk/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))

  :hook (lsp-mode . kk/lsp-mode-setup))
#+end_src

***** Lsp-Ui
:PROPERTIES:
:ID:       607708a4-845a-4cd6-a72b-0cbc19354e13
:END:

#+begin_src emacs-lisp

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

#+end_src

***** Treemacs
:PROPERTIES:
:ID:       200e3421-5bd7-4905-9ace-6d9f075a8cc5
:END:

#+begin_src emacs-lisp

(use-package lsp-treemacs
  :after lsp-mode
  :commands treemacs)

(global-set-key (kbd "C-c t") 'lsp-treemacs-symbols)


#+end_src

*** TypeScript
:PROPERTIES:
:ID:       d930e863-9173-423f-952d-d04f405cae35
:END:

Execute ~npm i -g typescript-language-server; npm i -g typescript~ first to install the language server

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

#+end_src

*** Angular
:PROPERTIES:
:ID:       9d2433de-10c3-458e-9ae0-fb9081b8f201
:END:

[[Https://Github.Com/Adamniederer/Ng2-Mode][Ng2-Mode Github]]

#+begin_src emacs-lisp

(use-package ng2-mode
  :defer t)

#+end_src

*** Php
:PROPERTIES:
:ID:       f4fe24a0-b722-415e-9523-e368d63b3de8
:END:

#+begin_src emacs-lisp

(use-package php-mode
  :mode "\\.php\\'"
  :hook (php-mode . lsp-deferred))

#+end_src

*** Python
:PROPERTIES:
:ID:       daa05972-9f89-4ba8-88db-a37fd9835ed5
:END:

#+begin_src emacs-lisp

(use-package python-mode
  :hook (python-mode . lsp-deferred)
  :custom
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))

#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

(use-package pyvenv
  :after python-mode
  :config
  (pyvenv-mode 1))

#+end_src

*** Html + Css
:PROPERTIES:
:ID:       16ccfa0f-bb5f-48cf-bc59-f97cc7e95719
:END:

#+begin_src emacs-lisp

(use-package web-mode
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode
  :defer t)

(use-package skewer-mode
  :defer t)

#+end_src

**** Emmet
:PROPERTIES:
:ID:       9a4a1ee5-68f6-4922-aba6-fc835a173960
:END:

#+begin_src emacs-lisp

(use-package emmet-mode
  :defer t
  :hook
  ((sgml-mode-hook . emmet-mode)
   (css-mode-hook . emmet-mode))
  :bind (:map emmet-mode-keymap
              ("C-<tab>" . emmet-expand-line)))

#+end_src

*** Common Lisp
:PROPERTIES:
:ID:       d7e5748e-eaa2-4248-9d65-9f4b9b094d2e
:END:

#+begin_src emacs-lisp

(use-package sly
  :defer t)

#+end_src

*** C#
:PROPERTIES:
:ID:       e1a0c1af-98a9-49b5-b8b9-a273a30a25ad
:END:

#+begin_src emacs-lisp

(use-package csharp-mode
  :defer t)

#+end_src

*** Markdown
:PROPERTIES:
:ID:       eb0d2d39-66b5-4ae7-ba79-d73606cca25e
:END:

#+begin_src emacs-lisp

(use-package markdown-mode
  :defer t
  :mode "\\.md\\'")

#+end_src

*** YAML
:PROPERTIES:
:ID:       0768352b-7c12-4e82-b973-ae01c034095a
:END:

#+begin_src emacs-lisp

(use-package yaml-mode
  :mode "\\.ya?ml\\'")

#+end_src

*** SQL
:PROPERTIES:
:ID:       ce270c8c-46ff-4d70-a178-e9e060ba3e30
:END:

#+begin_src emacs-lisp

(use-package sqlformat)

#+end_src

** Debugging With Dap-Mode
:PROPERTIES:
:ID:       f36ab9f7-3a7f-42fc-b5c1-e98f1eca2022
:END:

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

(use-package dap-mode
  ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; :custom
  ;; (lsp-enable-dap-auto-configure nil)
  ;; :config
  ;; (dap-ui-mode 1)
  ;; Customize which windows to display with
  ;; (dap-auto-configure-features '(sessions locals tooltip))
  :commands dap-debug
  :config
  ;; Set up Node debugging
  (require 'dap-node)
  (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  ;; Bind `C-c l d` to `dap-hydra` for easy access
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :wk "debugger")))

#+end_src

** Company Mode
:PROPERTIES:
:ID:       c29ea118-4fbc-4989-a4a8-3dc9c66f3a5d
:END:

#+begin_src emacs-lisp

(use-package company
  :defer 0
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Magit
:PROPERTIES:
:ID:       2f930ee5-f448-4b6a-b595-ccc070e9ed8a
:END:

#+begin_src emacs-lisp

(use-package magit
  :commands magit-status)
(setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

#+end_src

** Projectile
:PROPERTIES:
:ID:       1ffce63d-fc40-45ad-a836-de7b2626dd44
:END:

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-x p" . projectile-command-map)
  :init
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

#+end_src

** Parenthesis
*** Rainbow Delimiters
:PROPERTIES:
:ID:       2dbbbe78-f515-4d75-a7d4-934a3e2fed39
:END:

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** Show-Paren-Mode
:PROPERTIES:
:ID:       49a3f601-898c-4d33-88be-60bb4cc57eca
:END:

#+begin_src emacs-lisp

(show-paren-mode 1)

#+end_src

*** Smartparens
:PROPERTIES:
:ID:       3d30ffa8-8fec-4a26-ba8a-8bdb559ddcff
:END:

#+begin_src emacs-lisp

(use-package smartparens
  :defer t
  :hook (prog-mode . smartparens-mode)
  :config
  (require 'smartparens-config))

#+end_src

** Flycheck
:PROPERTIES:
:ID:       006d689d-ee55-4921-9ee8-c1446d181137
:END:

#+begin_src emacs-lisp

(use-package flycheck
  :defer t
  :config
  (global-flycheck-mode))

#+end_src

** Indent-Guide
:PROPERTIES:
:ID:       216b92ca-eec4-4b4e-8839-1d4bfe1f2942
:END:

#+begin_src emacs-lisp

(use-package indent-guide
  :hook (prog-mode . indent-guide-mode))

#+end_src

** Format-All
:PROPERTIES:
:ID:       7f64ca5c-750f-42cc-8bb8-69eb23c697f6
:END:

#+begin_src emacs-lisp

(use-package format-all
  :defer t)

#+end_src

** Editorconfig
:PROPERTIES:
:ID:       4be98407-abff-413c-870a-1c7838886ed6
:END:

[[https://editorconfig.org/][Editorconfig.org]]

#+begin_src emacs-lisp

(use-package editorconfig
  :config
  (editorconfig-mode 1))

#+end_src

** Know-Your-Http-Well
:PROPERTIES:
:ID:       5e3278c6-acf1-4b7e-8b03-441d9b17c90f
:END:

#+begin_src emacs-lisp

(use-package know-your-http-well
  :defer t)

#+end_src

** Column Enforce Mode
:PROPERTIES:
:ID:       f756cd58-542e-4ba6-b758-60c6a6910d59
:END:

This package helps to remember the [[https://www.emacswiki.org/emacs/EightyColumnRule][Eighty Column Rule]].

#+begin_src emacs-lisp

(use-package column-enforce-mode
  :hook (prog-mode . column-enforce-mode)
  :config
  (setq column-enforce-comments nil))

#+end_src

* Tramp
:PROPERTIES:
:ID:       4a3a0dba-4444-46ed-874c-116f24aec25e
:END:

#+begin_src emacs-lisp

(setq tramp-default-method "ssh")

#+end_src

* Writing
** Word Completion
:PROPERTIES:
:ID:       c86dfe0a-6753-4e59-b541-b7ba704609a4
:END:

#+begin_src emacs-lisp

(defun kk/text-mode-completion-setup ()
  (interactive)
  (require 'company)
  (add-to-list 'company-backends 'company-ispell))

(add-hook 'text-mode-hook 'kk/text-mode-completion-setup)

#+end_src

** Spellcheck
:PROPERTIES:
:ID:       b57fe851-1de1-4cb9-9152-4dfa9b2a82e8
:END:

#+begin_src emacs-lisp

;; (add-hook 'text-mode-hook 'flyspell-mode)

#+end_src

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'flyspell-prog-mode)

#+end_src

** Guess-Language
:PROPERTIES:
:ID:       c7ebf251-ccb7-4310-98fa-bde57dad4961
:END:

#+begin_src emacs-lisp

(use-package guess-language         ; Automatically detect language for Flyspell
  :ensure t
  :defer t
  :init (add-hook 'ispell-minor-mode-hook #'guess-language-mode)
  :config
  (setq guess-language-langcodes '((de . ("de_DE" "German"))
                                   (en . ("en_US" "English")))
        guess-language-languages '(de en)
        guess-language-min-paragraph-length 40)
  :diminish guess-language-mode)

#+end_src

** Typographical Editing
:PROPERTIES:
:ID:       2df53b97-fe9d-4256-aec7-4a51fba2db42
:END:

[[https://github.com/jorgenschaefer/typoel][typo.el on github]].

#+begin_src emacs-lisp

(use-package typo
  :hook (org-mode . typo-mode)
  :defer t
  :config
  (setq-default typo-language 'German))

#+end_src

* Keybindings
** Evil Mode
:PROPERTIES:
:ID:       961524ac-e18f-4d19-9499-3011219705a7
:END:

I had issues with the undo-system. Setting =evil-undo-system= manually, outside of =customize=, wasn't doing it. Now =evil-undo-function= and =evil-redo-function= are set manually.

#+begin_src emacs-lisp

(defun kk/evil-hook ()
  (dolist (mode '(cfw:details-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump t)
  (setq evil-want-C-i-jump t)
  :hook (evil-mode . kk/evil-hook)
  :config
  (evil-mode 1)
  (customize-set-variable 'evil-disable-insert-state-bindings t)

  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  (setq evil-undo-function 'undo-fu-only-undo)
  (setq evil-redo-function 'undo-fu-only-redo)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+end_src

*** Special Evil Modemap
:PROPERTIES:
:ID:       0c1cd2ae-8af6-4783-bfce-d6d57e959ef6
:END:

#+begin_src emacs-lisp

(defvar kk/intercept-mode-map (make-sparse-keymap)
  "High precedence keymap.")

(define-minor-mode kk/intercept-mode
  "Global minor mode for higher precedence evil keybindings."
  :global t)

(kk/intercept-mode)

(dolist (state '(normal visual insert motion))
  (evil-make-intercept-map
   ;; NOTE: This requires an evil version from 2018-03-20 or later
   (evil-get-auxiliary-keymap kk/intercept-mode-map state t t)
   state))

(evil-define-key 'normal kk/intercept-mode-map
  (kbd "g j") 'evil-next-visual-line
  (kbd "g k") 'evil-previous-visual-line)

#+end_src

** Undo System
:PROPERTIES:
:ID:       f97a9725-7a2e-4a7a-ace6-bb209e837ab3
:END:

[[https://github.com/emacsmirror/undo-fu][undo-fu]]

#+begin_src emacs-lisp

(use-package undo-fu)

#+end_src

** General Leader Keys
:PROPERTIES:
:ID:       ead33ed8-cd3e-4a41-9e70-b9902e3eadd6
:END:

Defining leader keys using the general package.

#+begin_src emacs-lisp

(use-package general
  :after evil
  :config
  (general-create-definer kk/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (kk/leader-keys
    "o" '(hydra-favorite-files/body :which-key "favorite files")
    "a" '(org-agenda :which-key "org-agenda")
    "t" '(hydra-daily-todos/body :which-key "todays TODOs")
    "f" '(hydra-focus-areas/body :which-key "focus areas")
    "b" '(hydra-buffer-control/body :which-key "control buffers")
    "h" '(hydra-bookmark-control/body :which-key "control bookmarks")
    "w" '(hydra-window-size/body :which-key "change window size")
    "j" '(winner-undo :which-key "winner undo")
    "k" '(winner-redo :which-key "winner redo")))

#+end_src

** General Global Bindings
:PROPERTIES:
:ID:       9a4e9f97-7b95-4c35-a7f6-8f161dafcb14
:END:

#+begin_src emacs-lisp

;;Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(global-set-key (kbd "C-x k") 'kill-this-buffer)

(global-set-key (kbd "C-c a") '(lambda ()
                                 (interactive)
                                 (kk/merge-diary-files)
                                 (org-agenda)))

(global-set-key (kbd "C-c g") 'magit-status)

(global-set-key (kbd "C-c m") 'mu4e)

(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
(global-set-key (kbd "C-x b") 'ido-switch-buffer)

(global-set-key (kbd "C-c <return>") 'eshell)

(global-set-key (kbd "C-c C-<return>") 'term)

(global-set-key (kbd "C-M-j") 'ibuffer)

(global-set-key (kbd "C-c c") 'kk/open-calendar)
(global-set-key (kbd "C-c C") 'calendar)

(global-set-key (kbd "C-c r") 'elfeed)

(global-set-key (kbd "C-c s") 'spray-mode)

(global-set-key (kbd "C-c M-j") 'winner-undo)
(global-set-key (kbd "C-c M-k") 'winner-redo)

(global-set-key (kbd "C-c l") 'org-store-link)

(global-set-key [f5] 'universal-argument)

#+end_src

** Movement
*** Move Where I Mean
:PROPERTIES:
:ID:       a4f4359f-98b2-4559-a176-31457f38a685
:END:
[[https://github.com/alezost/mwim.el][mwim]]

#+begin_src emacs-lisp

(use-package mwim
  :config
  (global-set-key (kbd "C-a") 'mwim-beginning)
  (global-set-key (kbd "C-e") 'mwim-end)
  (add-hook 'evil-visual-state-entry-hook (lambda ()
                                            (define-key evil-visual-state-map (kbd "C-e") 'mwim-end)
                                            (define-key evil-visual-state-map (kbd "C-a") 'mwim-beginning)))
  (add-hook 'evil-normal-state-entry-hook (lambda ()
                                            (define-key evil-normal-state-map (kbd "C-e") 'mwim-end)
                                            (define-key evil-normal-state-map (kbd "C-a") 'mwim-beginning)))
  (add-hook 'evil-insert-state-entry-hook (lambda ()
                                            (define-key evil-insert-state-map (kbd "C-e") 'mwim-end)
                                            (define-key evil-insert-state-map (kbd "C-a") 'mwim-beginning))))

#+end_src

** Insertions
:PROPERTIES:
:ID:       6141ad82-9dbe-4c2e-b879-5d58c91ae1ad
:END:

I guess the =C-c i= area makes sense, standing for *I* nsertions.

#+begin_src emacs-lisp

(global-set-key (kbd "C-c i d") 'kk/insert-todays-date)
(global-set-key (kbd "C-c i D") 'kk/insert-tomorrows-date)
(global-set-key (kbd "C-c i t") 'kk/daily-todos-today)
(global-set-key (kbd "C-c i T") 'kk/daily-todos-tomorrow)

#+end_src

** Search
:PROPERTIES:
:ID:       d942b98c-ed93-4e99-910a-b2b016fb5b5e
:END:
#+begin_src emacs-lisp

(global-set-key (kbd "M-s i") 'rgrep) ;; search the *I*nside of files with grep recursively

(global-set-key (kbd "M-s d") 'find-name-dired) ;; search the *D*irectories for filenames recursively

(global-set-key (kbd "M-s M-d") 'kk/search-region-on-duden)

(global-set-key (kbd "M-s M-t") 'kk/search-region-on-dict)

#+end_src

** Hydra
:PROPERTIES:
:ID:       9479a38d-48f6-4dcd-ba6c-0687c1cf5d90
:END:

#+begin_src emacs-lisp

(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(defhydra hydra-buffer-control (:timeout 4)
  "change buffers"
  ("l" counsel-switch-buffer "list" :exit t)
  ("c" kill-current-buffer "kill current" :exit t)
  ("k" previous-buffer "previous")
  ("j" switch-to-next-buffer "next")
  ("f" nil "finished" :exit t))


(defhydra hydra-bookmark-control (:timeout 5)
  "set and load bookmarks"
  ("s" bookmark-set "set")
  ("l" bookmark-bmenu-list "list")
  ("f" nil "finished" :exit t))

(defhydra hydra-window-size (:timeout 5)
  "change window sizes"
  ("u" balance-windows "balance")
  ("j" evil-window-decrease-height "decrease height")
  ("k" evil-window-increase-height "increase height")
  ("h" evil-window-decrease-width "decrease width")
  ("l" evil-window-increase-width "increase width")
  ("f" make-frame "make frame"))

(defhydra hydra-daily-todos (:timeout 5)
  "go to the current days TODOs"
  ("p" (lambda ()
         (interactive)
         (kk/find-org-file-at-headline
          kk/personal-daily-todo-file (kk/date nil
                                               "%Y-%m-%d %A"
                                               "en_US.utf8")))
   "personal" :exit t)
  ("w" (lambda ()
         (interactive)
         (kk/find-org-file-at-headline
          kk/work-daily-todo-file (kk/date nil
                                           "%Y-%m-%d %A"
                                           "en_US.utf8")))
   "work" :exit t))

(defhydra hydra-favorite-files (:hint nil)
  "
^Personal^                 ^Work^                  ^Academical
^^^^^^^^-----------------------------------------------------------------
_p_: agenda                _w_: agenda             _a_: agenda
_P_: diary                 _W_: diary              _A_: diary
_J_: journal
_e_: emacs.org
_f_: ledger
"
  ("e" (lambda ()
         (interactive)
         (find-file "~/.emacs.d/emacs.org")))
  ("f" (lambda ()
         (interactive)
         (find-file "~/Nextcloud/Documents/fin/journal.ledger")))
  ("J" (lambda ()
         (interactive)
         (find-file kk/personal-journal)))
  ("w" (lambda ()
         (interactive)
         (find-file kk/work-agenda-file)))
  ("W" (lambda ()
         (interactive)
         (find-file kk/work-diary-file)))
  ("a" (lambda ()
         (interactive)
         (find-file kk/academical-agenda-file)))
  ("A" (lambda ()
         (interactive)
         (find-file kk/academical-diary-file)))
  ("p" (lambda ()
         (interactive)
         (find-file kk/personal-agenda-file)))
  ("P" (lambda ()
         (interactive)
         (find-file kk/personal-diary-file)))
  ("c" nil "cancel"))

(defhydra hydra-focus-areas (:hint nil)
  "
^Single^                   ^Combinations
^^^^^^^^-----------------------------------------------------------------
_p_: personal              _f_: work + academical
_w_: work                  _j_: personal + academical
_a_: academical            _k_: personal + work + academical
"
  ("p" kk/focus-personal :exit t)
  ("w" kk/focus-work :exit t)
  ("a" kk/focus-academical :exit t)
  ("f" kk/focus-work-academical :exit t)
  ("j" kk/focus-personal-academical :exit t)
  ("k" kk/focus-personal-work-academical :exit t)
  ("n" kk/focus-nothing "nothing" :exit t)
  ("c" nil "cancel"))

(defhydra hydra-development (:hint nil)
  "
^Development
^^^^^^^^-----------------------------------------------------------------
_c_: recompile
_C_: compile
"
  ("c" recompile :exit t)
  ("C" compile :exit t)
  ("f" kk/tidy-buffer :exit t))
(bind-key "C-c h" #'hydra-development/body prog-mode-map)

(defhydra hydra-mail (:hint nil)
  "
^Blocking^              ^Misc
^^^^^^^^-----------------------------------------------------------------
_r_: by regex           _d_: new mail dir
_f_: by sender
_s_: by subject
"
  ("r" kk/mail-block-by-regex :exit t)
  ("f" kk/mail-block-by-sender :exit t)
  ("s" kk/mail-block-by-subject :exit t)
  ("d" kk/mu4e-create-new-mail-folder :exit t)
  ("c" nil "cancel"))

#+end_src

* Terminals
** Term-Mode
:PROPERTIES:
:ID:       053b2951-f7c0-4f48-8e65-08e8c27dcad8
:END:

=term-mode= is a built-in terminal emulator in Emacs. Because it is written in Emacs Lisp, you can start using it immediately with very little configuration. If you are on Linux or macOS, term-mode is a great choice to get started because it supports fairly complex terminal applications (htop, vim, etc) and works pretty reliably. However, because it is written in Emacs Lisp, it can be slower than other options like vterm. The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is line-mode versus char-mode. line-mode enables you to use normal Emacs keybindings while moving around in the terminal buffer while char-mode sends most of your keypresses to the underlying terminal. While using term-mode, you will want to be in char-mode for any terminal applications that have their own keybindings. If you’re just in your usual shell, line-mode is sufficient and feels more integrated with Emacs.

With evil-collection installed, you will automatically switch to char-mode when you enter Evil’s insert mode (press i). You will automatically be switched back to line-mode when you enter Evil’s normal mode (press ESC).

Run a terminal with M-x term!

Useful key bindings:

- C-c C-p / C-c C-n - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- C-c C-k - Enter char-mode
- C-c C-j - Return to line-mode

If you have evil-collection installed, term-mode will enter char mode when you use Evil’s Insert mode

#+begin_src emacs-lisp

(use-package term
  :commands term
  :config
  (setq explicit-shell-file-name "bash")
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better Term-Mode Colors
:PROPERTIES:
:ID:       0402d420-d128-4a6c-bfd8-6905b6e63309
:END:

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))

#+end_src

** Vterm
:PROPERTIES:
:ID:       aad15610-78c1-442d-8924-1c5d8b707139
:END:

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

#+end_src

** Shell-Mode
:PROPERTIES:
:ID:       e85538d7-ba3b-488f-ab64-490572900b07
:END:

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

(when (eq system-type 'windows-nt)
  (setq explicit-shell-file-name "powershell.exe")
  (setq explicit-powershell.exe-args '()))

(setq shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")

#+end_src

** Eshell
:PROPERTIES:
:ID:       d0cc6784-c8c3-4c07-89d0-fb4557e0f8c0
:END:

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

(defun kk/configure-eshell ()
  "Configure the `eshell'."
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . kk/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'default))

#+end_src

* Browser
:PROPERTIES:
:ID:       177f5f11-f4b5-47d5-9de0-573aac2d8484
:END:

#+begin_src emacs-lisp

(setq browse-url-secondary-browser-function #'kk/open-with-o)

#+end_src

** Eww
:PROPERTIES:
:ID:       432f01bf-3251-448e-81c7-ad18c94d369d
:END:

#+begin_src emacs-lisp

(use-package eww
  :config (setq browse-url-browser-function 'eww
                shr-width 80))

#+end_src

** Elpher
:PROPERTIES:
:ID:       f4d091e3-7ae6-4fe1-b930-ff32d8dde580
:END:

#+begin_src emacs-lisp

(use-package elpher
  :defer t
  :config
  (advice-add 'eww-browse-url :around 'elpher:eww-browse-url)

  (defun elpher:eww-browse-url (original url &optional new-window)
    "Handle gemini links."
    (cond ((string-match-p "\\`\\(gemini\\|gopher\\)://" url)
           (require 'elpher)
           (elpher-go url))
          (t (funcall original url new-window)))))

#+end_src

* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration
:PROPERTIES:
:ID:       169de694-a0a7-4ac8-9d4d-2274d9f7152a
:END:

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-Alh --group-directories-first"))
  :hook (dired-mode . dired-hide-details-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer
    "L" 'dired-open-xdg))

(use-package dired-single
  :after dired)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :after dired
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "sxiv")
                                ("mkv" . "mpv"))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

* Communication
** Managing Email with mu4e
*** Signatures
:PROPERTIES:
:ID:       c9d3806f-ec11-44f3-85d1-a027c4e04dd6
:END:

#+begin_src emacs-lisp

(defun kk/mu4e-choose-signature ()
  "Insert one of a number of sigs."
  (interactive)
  (let ((message-signature
         (mu4e-read-option "Signature:"
                           '(("work" .
                              (concat
                               "-------------------------------------\n"
                               "digital worx GmbH\n"
                               "Schulze-Delitzsch-Str. 16\n"
                               "70565 Stuttgart\n"
                               "\n"
                               "Tel. 0711 220 40 93 0\n"
                               "Fax. 0711 220 40 93 44\n"
                               "\n"
                               "kloess@digital-worx.de\n"
                               "\n"
                               "http://www.digital-worx.de\n"
                               "-------------------------------------\n"
                               "Geschaeftsfuehrer:\n"
                               "Sven Rahlfs\n"
                               "Mirko Ross\n"
                               "\n"
                               "HRB 22 5281 Amtsgericht Stuttgart\n"
                               "USt.-Id. Nr.: DE218401190\n"
                               "-------------------------------------"))))))
    (message-insert-signature)))

#+end_src

*** General
:PROPERTIES:
:ID:       fc11d01f-223a-4844-ae9c-35f9da1d7f6d
:END:

#+begin_src emacs-lisp

(defun kk/mu4e-add-standard-bookmarks ()
  "Add additional mu4e bookmarks to existing `mu4e-bookmarks'.
This is used to have standard bookmarks, to be added to context specific bookmarks."
  (interactive)
  (add-to-list 'mu4e-bookmarks '(:query "m:/kloess@digital-worx.de/Inbox or m:/karsten.kloess@its-stuttgart.de/Inbox or m:/info@kloess.xyz/Inbox or m:/karsten@kloess.xyz/Inbox or m:/k@kloess.xyz/Inbox" :name "All Inboxes" :key ?y) t)
  (add-to-list 'mu4e-bookmarks '(:query "flag:unread" :name "All Unread" :key ?x) t))

(add-hook 'mu4e-context-changed-hook 'kk/mu4e-add-standard-bookmarks)

(use-package mu4e
  :defer 0
  :ensure nil
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  :custom
  (mu4e-confirm-quit nil)
  :config
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (dolist (map '(mu4e-main-mode-map
                 mu4e-view-mode-map
                 mu4e-headers-mode-map))
    (bind-key "C-c h" #'hydra-mail/body map))

  ;; Display options
  (setq mu4e-view-show-images t)
  (setq mu4e-view-show-addresses 't)
  (setq mu4e-headers-include-related nil)

  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using mbsync every 5 minutes
  (setq mu4e-update-interval (* 5 60))
  (setq mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/mbsyncrc")
  (setq mu4e-maildir "~/.local/share/mail")

  ;; Configure the function to use for sending mail
  (setq sendmail-program "/usr/bin/msmtp"
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-send-mail-with-sendmail)

  (bind-key "C-c C-w" #'kk/mu4e-choose-signature mu4e-compose-mode-map)

  (setq mu4e-contexts
        (list
         ;; digital-worx
         (make-mu4e-context
          :name "dx"
          :enter-func (lambda ()
                        (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                          (revert-buffer)))
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/kloess@digital-worx.de" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "kloess@digital-worx.de")
                  (user-full-name    . "Karsten Klöss")
                  (mu4e-drafts-folder  . "/kloess@digital-worx.de/Drafts")
                  (mu4e-sent-folder  . "/kloess@digital-worx.de/Sent")
                  (mu4e-refile-folder  . "/kloess@digital-worx.de/Archives")
                  (mu4e-trash-folder  . "/kloess@digital-worx.de/Trash")
                  (mu4e-maildir-shortcuts .
                                          ((:maildir "/kloess@digital-worx.de/INBOX" :key ?i)
                                           (:maildir "/kloess@digital-worx.de/Archives" :key ?a)
                                           (:maildir "/kloess@digital-worx.de/Trash" :key ?t)
                                           (:maildir "/kloess@digital-worx.de/Drafts" :key ?d)
                                           (:maildir "/kloess@digital-worx.de/Junk" :key ?j)
                                           (:maildir "/kloess@digital-worx.de/digital worx" :key ?x)
                                           (:maildir "/kloess@digital-worx.de/asvin" :key ?v)
                                           (:maildir "/kloess@digital-worx.de/kohlhammer" :key ?k)
                                           (:maildir "/kloess@digital-worx.de/Porsche" :key ?p)
                                           (:maildir "/kloess@digital-worx.de/privileg" :key ?o)
                                           (:maildir "/kloess@digital-worx.de/Sent" :key ?s)
                                           (:maildir "/kloess@digital-worx.de/Wafios" :key ?w)))
                  (mu4e-bookmarks .
                                  ((:name "Unread digital-worx" :query "m:/kloess@digital-worx.de/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                   (:name "Today's messages digital-worx" :query "m:/kloess@digital-worx.de/ AND date:today..now" :key ?t)
                                   (:name "Last 7 days digital-worx" :query "m:/kloess@digital-worx.de/ AND date:7d..now" :hide-unread t :key ?w)
                                   (:name "Messages with calendar files digital-worx" :query "m:/kloess@digital-worx.de/ mime:text/calendar" :key ?i)
                                   (:name "Messages with attachments digital-worx" :query "m:/kloess@digital-worx.de/ flag:attach" :key ?a)
                                   (:name "Messages with images digital-worx" :query "m:/kloess@digital-worx.de/ mime:image/*" :key ?p)))))

         (make-mu4e-context
          :name "schule"
          :enter-func (lambda ()
                        (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                          (revert-buffer)))
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/karsten.kloess@its-stuttgart.de" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "karsten.kloess@its-stuttgart.de")
                  (user-full-name    . "Karsten Klöss")
                  (mu4e-drafts-folder  . "/karsten.kloess@its-stuttgart.de/Drafts")
                  (mu4e-sent-folder  . "/karsten.kloess@its-stuttgart.de/Sent")
                  (mu4e-refile-folder  . "/karsten.kloess@its-stuttgart.de/Archiv")
                  (mu4e-trash-folder  . "/karsten.kloess@its-stuttgart.de/Trash")
                  (mu4e-maildir-shortcuts .
                                          ((:maildir "/karsten.kloess@its-stuttgart.de/INBOX" :key ?i)
                                           (:maildir "/karsten.kloess@its-stuttgart.de/Archiv" :key ?a)
                                           (:maildir "/karsten.kloess@its-stuttgart.de/Trash" :key ?t)
                                           (:maildir "/karsten.kloess@its-stuttgart.de/Drafts" :key ?d)
                                           (:maildir "/karsten.kloess@its-stuttgart.de/Junk" :key ?j)
                                           (:maildir "/karsten.kloess@its-stuttgart.de/Sent" :key ?s)))
                  (mu4e-bookmarks .
                                  ((:name "Unread Schule" :query "m:/karsten.kloess@its-stuttgart.de/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                   (:name "Today's messages Schule" :query "m:/karsten.kloess@its-stuttgart.de/ AND date:today..now" :key ?t)
                                   (:name "Last 7 days Schule" :query "m:/karsten.kloess@its-stuttgart.de/ AND date:7d..now" :hide-unread t :key ?w)
                                   (:name "Messages with attachments Schule" :query "m:/karsten.kloess@its-stuttgart.de/ flag:attach" :key ?a)
                                   (:name "Messages with images Schule" :query "m:/karsten.kloess@its-stuttgart.de/ mime:image/*" :key ?p)))))

         (make-mu4e-context
          :name "info@kloess.xyz"
          :enter-func (lambda ()
                        (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                          (revert-buffer)))
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/info@kloess.xyz" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "info@kloess.xyz")
                  (user-full-name    . "Karsten Klöss")
                  (mu4e-drafts-folder  . "/info@kloess.xyz/Drafts")
                  (mu4e-sent-folder  . "/info@kloess.xyz/Sent")
                  (mu4e-refile-folder  . "/info@kloess.xyz/Archive")
                  (mu4e-trash-folder  . "/info@kloess.xyz/Trash")
                  (mu4e-maildir-shortcuts .
                                          ((:maildir "/info@kloess.xyz/INBOX" :key ?i)
                                           (:maildir "/info@kloess.xyz/Archive" :key ?a)
                                           (:maildir "/info@kloess.xyz/Trash" :key ?t)
                                           (:maildir "/info@kloess.xyz/Drafts" :key ?d)
                                           (:maildir "/info@kloess.xyz/Junk" :key ?j)
                                           (:maildir "/info@kloess.xyz/Sent" :key ?s)))
                  (mu4e-bookmarks .
                                  ((:name "Unread info@kloess" :query "m:/info@kloess.xyz/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                   (:name "Today's messages info@kloess" :query "m:/info@kloess.xyz/ AND date:today..now" :key ?t)
                                   (:name "Last 7 days info@kloess" :query "m:/info@kloess.xyz/ AND date:7d..now" :hide-unread t :key ?w)
                                   (:name "Messages with attachments info@kloess" :query "m:/info@kloess.xyz/ flag:attach" :key ?a)
                                   (:name "Messages with images info@kloess" :query "m:/info@kloess.xyz/ mime:image/*" :key ?p)))))

         (make-mu4e-context
          :name "jk@kloess.xyz"
          :enter-func (lambda ()
                        (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                          (revert-buffer)))
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/k@kloess.xyz" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "k@kloess.xyz")
                  (user-full-name    . "Karsten Klöss")
                  (mu4e-drafts-folder  . "/k@kloess.xyz/Drafts")
                  (mu4e-sent-folder  . "/k@kloess.xyz/Sent")
                  (mu4e-refile-folder  . "/k@kloess.xyz/Archive")
                  (mu4e-trash-folder  . "/k@kloess.xyz/Trash")
                  (mu4e-maildir-shortcuts .
                                          ((:maildir "/k@kloess.xyz/INBOX" :key ?i)
                                           (:maildir "/k@kloess.xyz/Archive" :key ?a)
                                           (:maildir "/k@kloess.xyz/Trash" :key ?t)
                                           (:maildir "/k@kloess.xyz/Drafts" :key ?d)
                                           (:maildir "/k@kloess.xyz/Junk" :key ?j)
                                           (:maildir "/k@kloess.xyz/digital worx" :key ?x)
                                           (:maildir "/k@kloess.xyz/asvin" :key ?v)
                                           (:maildir "/k@kloess.xyz/kohlhammer" :key ?k)
                                           (:maildir "/k@kloess.xyz/Porsche" :key ?p)
                                           (:maildir "/k@kloess.xyz/privileg" :key ?o)
                                           (:maildir "/k@kloess.xyz/Sent" :key ?s)
                                           (:maildir "/k@kloess.xyz/Wafios" :key ?w)))
                  (mu4e-bookmarks .
                                  ((:name "Unread k@kloess.xyz" :query "m:/k@kloess.xyz/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                   (:name "Today's messages k@kloess.xyz" :query "m:/k@kloess.xyz/ AND date:today..now" :key ?t)
                                   (:name "Last 7 days k@kloess.xyz" :query "m:/k@kloess.xyz/ AND date:7d..now" :hide-unread t :key ?w)
                                   (:name "Messages with calendar files k@kloess.xyz" :query "m:/k@kloess.xyz/ mime:text/calendar" :key ?i)
                                   (:name "Messages with attachments k@kloess.xyz" :query "m:/k@kloess.xyz/ flag:attach" :key ?a)
                                   (:name "Messages with images k@kloess.xyz" :query "m:/k@kloess.xyz/ mime:image/*" :key ?p)))))

         (make-mu4e-context
          :name "karsten@kloess.xyz"
          :enter-func (lambda ()
                        (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                          (revert-buffer)))
          :match-func
          (lambda (msg)
            (when msg
              (string-prefix-p "/karsten@kloess.xyz" (mu4e-message-field msg :maildir))))
          :vars '((user-mail-address . "karsten@kloess.xyz")
                  (user-full-name    . "Karsten Klöss")
                  (mu4e-drafts-folder  . "/karsten@kloess.xyz/Drafts")
                  (mu4e-sent-folder  . "/karsten@kloess.xyz/Sent")
                  (mu4e-refile-folder  . "/karsten@kloess.xyz/Archive")
                  (mu4e-trash-folder  . "/karsten@kloess.xyz/Trash")
                  (mu4e-maildir-shortcuts .
                                          ((:maildir "/karsten@kloess.xyz/INBOX" :key ?i)
                                           (:maildir "/karsten@kloess.xyz/Archive" :key ?a)
                                           (:maildir "/karsten@kloess.xyz/Trash" :key ?t)
                                           (:maildir "/karsten@kloess.xyz/Drafts" :key ?d)
                                           (:maildir "/karsten@kloess.xyz/Junk" :key ?j)
                                           (:maildir "/karsten@kloess.xyz/digital worx" :key ?x)
                                           (:maildir "/karsten@kloess.xyz/asvin" :key ?v)
                                           (:maildir "/karsten@kloess.xyz/kohlhammer" :key ?k)
                                           (:maildir "/karsten@kloess.xyz/Porsche" :key ?p)
                                           (:maildir "/karsten@kloess.xyz/privileg" :key ?o)
                                           (:maildir "/karsten@kloess.xyz/Sent" :key ?s)
                                           (:maildir "/karsten@kloess.xyz/Wafios" :key ?w)))
                  (mu4e-bookmarks .
                                  ((:name "Unread karsten@kloess.xyz" :query "m:/karsten@kloess.xyz/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                   (:name "Today's messages karsten@kloess.xyz" :query "m:/karsten@kloess.xyz/ AND date:today..now" :key ?t)
                                   (:name "Last 7 days karsten@kloess.xyz" :query "m:/karsten@kloess.xyz/ AND date:7d..now" :hide-unread t :key ?w)
                                   (:name "Messages with calendar files karsten@kloess.xyz" :query "m:/karsten@kloess.xyz/ mime:text/calendar" :key ?i)
                                   (:name "Messages with attachments karsten@kloess.xyz" :query "m:/karsten@kloess.xyz/ flag:attach" :key ?a)
                                   (:name "Messages with images karsten@kloess.xyz" :query "m:/karsten@kloess.xyz/ mime:image/*" :key ?p))))))))
#+end_src

*** Org-Mime
:PROPERTIES:
:ID:       5568dec1-9d80-436b-9e6f-227ba4a6c5aa
:END:

#+begin_src emacs-lisp

(use-package org-mime
  :ensure t
  :defer t
  :config
  (setq org-mime-export-options '(:section-numbers nil
                                                   :with-author nil
                                                   :with-toc nil))
  (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
  (add-hook 'org-mime-html-hook
            (lambda nil
              (org-mime-change-element-style
               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                             "#f6f6f6" "#2f3337")))))

#+end_src

** RSS
:PROPERTIES:
:ID:       1871feda-ab57-4cdf-b95f-0807960bb504
:END:

#+begin_src emacs-lisp

(use-package elfeed
  :commands elfeed
  :config
  (defun kk/elfeed-show-visit-with-o ()
    "Use the usual `elfeed-show-visit' command, but previously set
`browse-url-browser-function' to `kk/open-with-o'"
    (interactive)
    (let ((browse-url-browser-function 'kk/open-with-o))
      (elfeed-show-visit)))
  (bind-key "C-<return>" #'kk/elfeed-show-visit-with-o elfeed-show-mode-map)
  (setq elfeed-feeds
        '(("http://www.tagesschau.de/export/podcast/hi/tagesschau-in-100-sekunden/" news)
          ("https://www.heise.de/rss/heise-Rubrik-IT-atom.xml" news tech)
          ("https://unixsheikh.com/feed.rss" tech linux privacy)
          ("https://lukesmith.xyz/rss.xml" personal tech)
          ("https://www.brandonsanderson.com/feed/" books fantasy)
          ("https://serpentsec.com/feed/" security)
          ("https://based.cooking/rss.xml" cooking)
          ("https://videos.lukesmith.xyz/feeds/videos.xml?accountId=3" videos)
          ("https://youtube.com/feeds/videos.xml?channel_id=UCKqoiG45T1OkQkUEq5dEMzA" knifes victorinox yt videos)
          ("https://youtube.com/feeds/videos.xml?channel_id=UCsnGwSIHyoYN0kiINAGUKxg" yt tech linux videos)
          ("https://youtube.com/feeds/videos.xml?channel_id=UChBEbMKI1eCcejTtmI32UEw" yt cooking videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsVWpmoRsNAWZb59b6Pt9Kg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCTHij3Ac5GizLsn5yB4IX_Q" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCm9faLh4Rrmlp8FR9MPsJxg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZNhwA1B5YqiY1nLzmM0ZRg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCfp-lNJy4QkIGnaEE6NtDSg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCts-8ZqS339n-9nxy3DN8Cg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbTDXDBHApa_cvcOx86yJOA" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRE3NFNtdjR96-H4QG4U1Fg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UC5QwYlOxcT1higtcJVGzCCg" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UClcE-kVhqyiHCcjYwcpfj9w" videos)
          ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" videos)
          ("https://lbryfeed.melroy.org/channel/tv/Lunduke" videos linux tech)
          ("https://lbryfeed.melroy.org/channel/tv/christitustech" videos tech)
          ("https://lbryfeed.melroy.org/channel/tv/brodierobertson" videos linux)
          ("https://lbryfeed.melroy.org/channel/tv/techlore" videos privacy)
          ("https://lbryfeed.melroy.org/channel/tv/distrotube" videos)
          ("https://notrelated.xyz/rss" podcasts)
          ("http://feeds.soundcloud.com/users/soundcloud:users:261098918/sounds.rss" privacy security tech podcasts)
          ("https://old.reddit.com/r/linux.rss" linux reddit)
          ("https://old.reddit.com/r/archlinux.rss" linux reddit)
          ("https://old.reddit.com/r/suckless.rss" reddit)
          ("https://www.archlinux.org/feeds/news/" linux linux tech arch)
          "https://store.pine64.org/shop/feed/"
          "http://suckless.org/atom.xml"
          ("https://old.reddit.com/r/wallstreetbets.rss" investing reddit money)
          ("https://old.reddit.com/r/emacs/.rss" reddit))))

#+end_src

* Calendar
:PROPERTIES:
:ID:       1249cedd-ba02-4fcd-90fe-bf60f9dff913
:END:
** Calfw
:PROPERTIES:
:ID:       b6918f87-bd7f-4ace-8184-1e06bc9abb9f
:END:

#+begin_src emacs-lisp

(use-package calfw
  :defer 0
  :config
  (setq cfw:fchar-junction ?╋
        cfw:fchar-vertical-line ?┃
        cfw:fchar-horizontal-line ?━
        cfw:fchar-left-junction ?┣
        cfw:fchar-right-junction ?┫
        cfw:fchar-top-junction ?┯
        cfw:fchar-top-left-corner ?┏
        cfw:fchar-top-right-corner ?┓)
  (set-face-attribute
   'cfw:face-holiday nil :background "#610300" :foreground "#0BE0CE" :weight 'bold))

(use-package calfw-org
  :after calfw
  :config
  (setq cfw:org-agenda-schedule-args '(:timestamp :deadline :scheduled)))

(use-package calfw-cal
  :after calfw)

(defun kk/open-calendar ()
  "Open calendar calfw with additional sources."
  (interactive)
  (kk/merge-diary-files)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")
    (cfw:cal-create-source "Orange"))))

#+end_src

** Make It German
:PROPERTIES:
:ID:       4e620164-5340-4f96-bec9-27f6d57e3f63
:END:
This section is based on [[https://www.emacswiki.org/emacs/CalendarLocalization#h5o-32][this]] entry in the emacs wiki.

#+begin_src emacs-lisp

(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-bahai-holidays nil)
(setq holiday-oriental-holidays nil)

(setq solar-n-hemi-seasons
      '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Neujahr")
        (holiday-fixed 5 1 "Tag der Arbeit")
        (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

;; Feiertage für Baden-Württemberg, weitere auskommentiert
(setq holiday-christian-holidays
      '((holiday-float 12 0 -4 "1. Advent" 24)
        (holiday-float 12 0 -3 "2. Advent" 24)
        (holiday-float 12 0 -2 "3. Advent" 24)
        (holiday-float 12 0 -1 "4. Advent" 24)
        (holiday-fixed 12 25 "1. Weihnachtstag")
        (holiday-fixed 12 26 "2. Weihnachtstag")
        (holiday-fixed 1 6 "Heilige Drei Könige")
        ;; (holiday-easter-etc -48 "Rosenmontag")
        ;; (holiday-easter-etc -3 "Gründonnerstag")
        (holiday-easter-etc  -2 "Karfreitag")
        (holiday-easter-etc   0 "Ostersonntag")
        (holiday-easter-etc  +1 "Ostermontag")
        (holiday-easter-etc +39 "Christi Himmelfahrt")
        (holiday-easter-etc +49 "Pfingstsonntag")
        (holiday-easter-etc +50 "Pfingstmontag")
        (holiday-easter-etc +60 "Fronleichnam")
        ;; (holiday-fixed 8 15 "Mariae Himmelfahrt")
        (holiday-fixed 11 1 "Allerheiligen")
        ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
        (holiday-float 11 0 1 "Totensonntag" 20)))

#+end_src

* Other
** Speed Reading
:PROPERTIES:
:ID:       1826f0b2-8616-4af6-ba0c-cbd197ff0e5d
:END:

#+begin_src emacs-lisp

(use-package spray
  :defer t
  :config
  (setq spray-wpm 400)
  (add-hook 'spray-mode-hook '(lambda ()
                                (turn-off-evil-mode)))
  (advice-add 'spray-quit :after 'turn-on-evil-mode))

#+end_src

** Auto-Reverting
:PROPERTIES:
:ID:       ff37f87a-1cc1-471e-b9da-f66098afee87
:END:

#+begin_src emacs-lisp

(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode)

#+end_src

** Ebooks
:PROPERTIES:
:ID:       06eb15f8-3474-4185-9ec2-59cd817952c6
:END:

#+begin_src emacs-lisp

(use-package ereader
  :hook
  (ereader-mode . (lambda ()
                    (display-line-numbers-mode 0)
                    (visual-line-mode 0))))

#+end_src

** PDFs
*** pdf-tools
:PROPERTIES:
:ID:       0b50472b-1f9c-45c3-9183-abf0f6e9590f
:END:

#+begin_src emacs-lisp

(use-package pdf-tools)

#+end_src
** Presentations
:PROPERTIES:
:ID:       da4820e0-0c84-423a-a1e5-fac9d5b560dc
:END:

#+begin_src emacs-lisp

(use-package org-tree-slide)

#+end_src
** Ledger
:PROPERTIES:
:ID:       5871c27a-aec5-4061-80f0-4db4944414d0
:END:

#+begin_src emacs-lisp

(use-package ledger-mode
  :custom
  (ledger-reconcile-default-commodity "€")
  (ledger-clear-whole-transactions t))

#+end_src

* Passwords
:PROPERTIES:
:ID:       673f3c72-febd-4073-9997-116f0a41e96f
:END:

#+begin_src emacs-lisp

(use-package password-store)

(use-package password-store-otp)

(use-package pass)

(use-package auth-source-pass
  :defer 0
  :config
  (setq auth-sources '(password-store))
  (auth-source-pass-enable))

#+end_src

* Restoring
** Winner-Mode
:PROPERTIES:
:ID:       bbc070a9-f002-4647-8700-89a161f80726
:END:

#+begin_src emacs-lisp

(winner-mode)

#+end_src

** Desktop-Save-Mode
:PROPERTIES:
:ID:       c38dc22c-ac80-46ee-b112-5d9e8b0c69b9
:END:

#+begin_src emacs-lisp

(defun kk/switch-desktop ()
  (interactive)
  ;; If save-silently-p is non-nil, saves all the file-visiting buffers
  ;;  without querying the user.
  (let ((save-silently nil))
    (save-some-buffers save-silently))
  (desktop-change-dir (read-directory-name "Change to directory: ")))

(setq desktop-files-not-to-save "^$" ; reload tramp buffers
      desktop-auto-save-timeout 30)

(desktop-save-mode 1)

#+end_src

* Custom Solutions
** Mail
*** Add New Mail Dir
:PROPERTIES:
:ID:       3c37e693-77c7-4295-a454-fedadc4800cd
:END:

#+begin_src emacs-lisp

(defun kk/mu4e-create-new-mail-folder (dir-name)
  "Create new mail folder for current context.
Only works, when `user-mail-address' equals the folder name in `mu4e-maildir'."
  (mu4e-context-switch)
  (interactive "sName of folder to create: ")
  (if (file-directory-p (format "%s/%s" mu4e-maildir user-mail-address))
      (kk/mu4e-create-sub-folders-in (format "%s/%s/%s/"
                                             mu4e-maildir user-mail-address dir-name))
    (message
     "Your email setup is not properly configured for this to work.")))

(defun kk/mu4e-create-sub-folders-in (dir)
  "Create the folders cur, new and tmp inside of `DIR'.
Parent directories will be created, if they don't exist."
  (kk/create-sub-directories dir '( "cur" "new" "tmp") t)
  (message "Subdirectory '%s' created." dir))

(defun kk/create-sub-directories (dir sub-dirs &optional parents)
  "Create sub directories `SUB-DIRS' in the directory `DIR'.
`DIR' needs a trailing slash.

The second (optional) argument `PARENTS', if
non-nil, says whether to create parent directories that don't
exist."
  (dolist (sub-dir sub-dirs)
    (make-directory (concat dir sub-dir) parents)))

#+end_src
*** Block Mail
:PROPERTIES:
:ID:       1ddd7223-1457-4b2e-9729-663a021e60fe
:END:

#+begin_src emacs-lisp

(defun kk/mail-block-by-regex (regexp)
  (interactive "sRegex: ")
  (eshell-command (format "blockmailbyheaderregex \"%s\"" regexp)))

(defun kk/mail-block-by-sender (sender)
  (interactive "sSender: ")
  (kk/mail-block-by-regex (format "^From:.*%s.*" sender)))

(defun kk/mail-block-by-subject (subject)
  (interactive "sSubject: ")
  (kk/mail-block-by-regex (format "^Subject:.*%s.*" subject)))
#+end_src

** Link Handler
:PROPERTIES:
:ID:       c46c6da6-ea72-4479-bdb5-e88923aa9d8a
:END:

Using my standard opener script [[https://github.com/tenklo/dotfiles/blob/master/.local/bin/o][o]], e.g. to open video links in mpv.
Invoke by browse-url-generic

#+begin_src emacs-lisp

(setq browse-url-generic-program
      (executable-find "o"))

#+end_src

#+begin_src emacs-lisp

(defun kk/open-with-o (arg &rest _rest)
  "Open anything via o (URL `https://raw.githubusercontent.com/tenklo/dotfiles/master/.local/bin/o' ), a custom opener script.
Ignore `_REST'."
  (interactive)
  (start-process "" nil "o" arg))

(defun kk/browse-url-at-point-with-o ()
  "Browse the url at point, opening it via o.
Run `browse-url-at-point', using `kk/open-with-o' as `browse-url-browser-function'."
  (interactive)
  (let ((browse-url-browser-function 'kk/open-with-o))
    (browse-url-at-point)))

#+end_src

** Date Headlines
:PROPERTIES:
:ID:       3a3d308f-c015-49f3-87a8-2db87e5881b8
:END:

#+begin_src emacs-lisp

(defun kk/insert-todays-date ()
  (interactive)
  (kk/insert-date "today"))

(defun kk/insert-tomorrows-date ()
  (interactive)
  (kk/insert-date "tomorrow"))

(defun kk/date (&optional date-arg format locale)
  "Return a date specified by `DATE_ARG'.
Calls the date function internally.
For format see code and just try it out."
  (shell-command-to-string
   (format "echo -n \"$(LC_ALL=%s date --date='%s' '+%s')\""
           (if locale locale "de_DE.utf8")
           (if date-arg date-arg "today")
           (if format format "%A %d. %B %Y"))))

(defun kk/insert-date (date-arg)
  (interactive "sWhen? ")
  (insert
   (kk/date date-arg)))

#+end_src

** Indent The Whole Buffer
:PROPERTIES:
:ID:       f9c30b65-2d1d-4f7f-aa52-b630a92483ab
:END:

#+begin_src emacs-lisp

(defun kk/tidy-buffer ()
  "Indent and tidy up the current buffer.
Delete trailing whitespace via `delete-trailing-whitespace', apply indentation via `indent-region', remove tabs via `untabify' and move point back to where we started."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace)))

#+end_src

** Search Region Via Something
:PROPERTIES:
:ID:       054335ca-bb86-4a6f-8b5f-59cab6a750b9
:END:

#+begin_src emacs-lisp

(defun kk/search-region-via (url)
  (interactive)
  (eww (concat url (buffer-substring (region-beginning) (region-end)))))

(defun kk/search-region-on-dict ()
  "Use dict.cc to find a translation to the region."
  (interactive)
  (kk/search-region-via "https://www.dict.cc/?s="))

(defun kk/search-region-on-duden ()
  "Use duden.de to find a definition to the region."
  (interactive)
  (kk/search-region-via "https://www.duden.de/suchen/dudenonline/"))

#+end_src
** Multiple Diarys
:PROPERTIES:
:ID:       b894e8f5-6637-4d28-b891-21e07709ccd4
:END:

#+begin_src emacs-lisp

(defun kk/merge-diary-files ()
  "Put the contents of `kk/diary-files' into `kk/default-diary-file'."
  (interactive)
  (message "Merging diary files...")
  (eshell-command (format "echo \"\" > %s" kk/default-diary-file))
  (kk/merge-files kk/default-diary-file kk/diary-files)
  (message "Diary files merged."))

(defun kk/merge-files (output-file input-file-list)
  "Loop over `input-file-list' and append contents to `output-file'."
  (when (bufferp output-file)
    (kill-buffer output-file))
  (dolist (file input-file-list)
    (kk/append-file-to-other-file file output-file)))

(defun kk/append-file-to-other-file (from to)
  "Use eshell to append contents of `from'-file to `to'-file."
  (when (file-exists-p from)
    (eshell-command (format "cat \"%s\" >> \"%s\"" from to))
    (eshell-command (format "printf \"\n\" >> \"%s\"" to))))

(defun kk/diary-make-entry
    (original string &optional nonmarking file omit-trailing-space do-not-show)
  (funcall original string nonmarking
           (if file file (call-interactively 'kk/choose-diary-file))
           omit-trailing-space do-not-show))

(defun kk/choose-diary-file (choice)
  (interactive
   (let ((completion-ignore-case  t))
     (list
      (completing-read "Choose: "
                       kk/diary-files nil t))))
  choice)

(advice-add 'diary-make-entry :around 'kk/diary-make-entry)

#+end_src

** Export Todays TODOs
:PROPERTIES:
:ID:       09aa9971-1197-4f52-9bd6-b9330074480e
:END:

#+begin_src emacs-lisp

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'kk/export-and-push-todays-todos)))

(defun kk/export-todays-todos ()
  "Exports TODOs by using todays date as headline."
  (interactive)
  (kk/export-headline-as-html (kk/date nil
                                       "%Y-%m-%d %A"
                                       "en_US.utf8"))
  nil)

(defun kk/export-headline-as-html (hl)
  "Export headline `HL' as html."
  (interactive)
  (save-excursion
    (org-link-search hl)
    (org-html-export-to-html nil t nil '())))

(defun kk/push-file-to-remote (file location &optional scp-args)
  "Push a file to somewhere via eshell.
Push `FILE' to `LOCATION'.
`LOCATION' needs the complete scp path, including server and user name.
Add scp args via `SCP-ARGS' like a port if necessary."
  (interactive)
  (if (equal scp-args 'nil)
      (setq scp-args ""))
  (eshell-command
   (format "scp %s %s %s" scp-args file location)))

(defun kk/export-and-push-todays-todos ()
  (interactive)
  (when (string-equal (buffer-file-name)
                      (expand-file-name kk/personal-daily-todo-file))
    (kk/export-todays-todos)
    (kk/push-file-to-remote
     (concat (file-name-sans-extension (buffer-file-name)) ".html")
     "karsten@kloess.xyz:/var/www/html/main/" "-P 69")
    (message "Pushed TODOs to server.")))

#+end_src

** Open Todays TODOs
:PROPERTIES:
:ID:       4fd4b149-f934-475a-b00a-18c82cd869ef
:END:

#+begin_src emacs-lisp

(defun kk/find-org-file-at-headline (file hl)
  (interactive)
  (find-file file)
  (org-link-search hl))

#+end_src

** Org Focus Areas
:PROPERTIES:
:ID:       c7ad8558-658e-4394-a97c-82848a45d477
:END:

#+begin_src emacs-lisp

(defun kk/focus-nothing ()
  (interactive)
  (kk/focus-on-these nil nil))

(defun kk/focus-work ()
  (interactive)
  (kk/focus-on-these
   (list kk/work-agenda-file)
   (list kk/work-diary-file)))

(defun kk/focus-personal ()
  (interactive)
  (kk/focus-on-these
   (list kk/personal-agenda-file)
   (list kk/personal-diary-file)))

(defun kk/focus-academical ()
  (interactive)
  (kk/focus-on-these
   (list kk/academical-agenda-file)
   (list kk/academical-diary-file)))

(defun kk/focus-work-academical ()
  (interactive)
  (kk/focus-on-these
   (list kk/work-agenda-file
         kk/academical-agenda-file)
   (list kk/work-diary-file
         kk/academical-diary-file)))

(defun kk/focus-personal-academical ()
  (interactive)
  (kk/focus-on-these
   (list kk/personal-agenda-file
         kk/academical-agenda-file)
   (list kk/personal-diary-file
         kk/academical-diary-file)))

(defun kk/focus-personal-work-academical ()
  (interactive)
  (kk/focus-on-these
   (list kk/personal-agenda-file
         kk/work-agenda-file
         kk/academical-agenda-file)
   (list kk/personal-diary-file
         kk/work-diary-file
         kk/academical-diary-file)))

(defun kk/focus-on-these (agenda-files diary-files)
  (interactive)
  (setq org-agenda-files agenda-files)
  (setq kk/diary-files diary-files))

#+end_src

** Capture Templates
:PROPERTIES:
:ID:       1aa551a5-7766-411c-b7f0-bdcfc0a338c7
:END:

#+begin_src emacs-lisp

(defun kk/todays-personal-todos ()
  (interactive)
  (format "[/]\nWichtigste drei:\n- [ ]%s \nSonstiges:\n- [ ] \n- [ ] Journal Eintrag\n- [ ] Meditieren"
          (if (= (string-to-number (kk/date nil "%u")) 7)
              "\n- [ ] [[id:589e0d4e-f608-406e-aa60-0acb0250729d][Weekly Review]]" "")))

(defun kk/todays-work-todos ()
  (interactive)
  (format "[/]\nWichtigste drei:\n- [ ]%s \nSonstiges:\n- [ ]"
          (if (= (string-to-number (kk/date nil "%u")) 1)
              "\n- [ ] [[id:d49951a7-af8e-4697-bbe2-08cc3d3318e1][Weekly Review]]" "")))

#+end_src

* Customization Through Emacs
** Disabled Commands
:PROPERTIES:
:ID:       019eee80-26e6-4eb1-95d2-ee805cc28578
:END:

Enable some disabled commands. Otherwise theres an annoying popup.

#+begin_src emacs-lisp

(put 'narrow-to-region 'disabled nil)

#+end_src

** Customized Variables
:PROPERTIES:
:ID:       bce48bf6-269c-41cb-9f47-55f163a7fa68
:END:

#+begin_src emacs-lisp

(custom-set-variables
 '(calendar-date-style 'iso)
 '(ledger-reports
   '(("cash flow (Income vs Expenses)" "ledger [[ledger-mode-flags]] -f /home/karsten/Nextcloud/Documents/fin/journal.ledger bal Income Expenses")
     ("Glueckspiel this year" "ledger [[ledger-mode-flags]] -f /home/karsten/Nextcloud/Documents/fin/journal.ledger reg Expenses:Gluecksspiel:Lotto Income:Gluecksspiel:Lotto -p \"this year\"")
     ("net worth (Assets vs Liabilities)" "ledger [[ledger-mode-flags]] -V -f /home/karsten/Nextcloud/Documents/fin/journal.ledger bal Assets Liabilities")
     ("Expenses this month" "ledger [[ledger-mode-flags]] -f /home/karsten/Nextcloud/Documents/fin/journal.ledger reg Expenses -p \"this month\"")
     ("Balance" "%(binary) -f %(ledger-file) bal not Investments")
     ("reg" "%(binary) -f %(ledger-file) reg")
     ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
     ("account" "%(binary) -f %(ledger-file) reg %(account)")))
 '(grep-find-template
   "find <D> <X> -type f <F> -exec grep <C> -n -I --null -e <R> /dev/null \\{\\} +")
 '(grep-template "grep <X> <C> -n -I --null -e <R> <F>")
 '(org-modules
   '(ol-bbdb ol-bibtex ol-docview ol-eww ol-gnus org-habit ol-info ol-irc ol-mhe ol-rmail ol-w3m)))

#+end_src

* Runtime Performance
:PROPERTIES:
:ID:       54b0ce83-4adf-4b2e-bf88-d61dc2f25c25
:END:

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))

#+end_src
