#+TITLE: Clean Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* About

This configuration aims to be simple, while still providing everything
I need. It should work across different devices, but provide only data
the individual device needs.

* General

** Startup Performance
:PROPERTIES:
:ID:       f4bea356-d5e1-4235-8110-381c0123e894
:END:

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Package System
:PROPERTIES:
:ID:       c8c6f928-3490-42ce-abfc-8858a1905f9f
:END:

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)
(setq use-package-verbose t)
#+end_src

** Aliases
:PROPERTIES:
:ID:       70553041-474f-4e9b-908d-bc5073359a77
:END:

#+begin_src emacs-lisp
(define-obsolete-function-alias 'string-to-int 'string-to-number "22.1")
#+end_src

** Yasnippet
:PROPERTIES:
:ID:       0443b84d-c816-42a8-9b5c-1a085ae702ca
:END:

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-reload-all)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  (defun kk/yas-id-remove-spaces (text)
    "Replace spaces in `TEXT' with '-'."
    (s-replace " " "-" text)))
#+end_src

** Auto Reverting/Saving
:PROPERTIES:
:ID:       01cb8b21-9528-4a0e-b1da-c5f06e5598fe
:END:

#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode)
(auto-save-visited-mode)
#+end_src

** New Prefix Key
:PROPERTIES:
:ID:       135229a4-8c75-45a6-a0ba-19f19b7d0c3a
:END:

For editing commands I guess.

*** Definition
:PROPERTIES:
:ID:       fd425158-2e4d-4987-8488-cf6543b5e334
:END:

#+begin_src emacs-lisp
(define-prefix-command 'edit-commands-map)
(global-set-key (kbd "C-z") 'edit-commands-map)
(define-key edit-commands-map (kbd "t") 'kk/tidy-buffer)
#+end_src

*** Editing
:PROPERTIES:
:ID:       25af5b78-c1bb-4378-9c96-48b1aef7e97a
:END:

#+begin_src emacs-lisp
(defun daedreth/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
(define-key edit-commands-map (kbd "C-w") 'daedreth/kill-inner-word)

(defun daedreth/copy-whole-word ()
  (interactive)
  (save-excursion
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (yank)))
(define-key edit-commands-map (kbd "w") 'daedreth/copy-whole-word)

(defun daedreth/copy-whole-line ()
  "Copies a line without regard for cursor position."
  (interactive)
  (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
(define-key edit-commands-map (kbd "l") 'daedreth/copy-whole-line)

(define-key edit-commands-map (kbd "C-l") 'kill-whole-line)

(define-key edit-commands-map (kbd "j") 'join-line)

(define-key edit-commands-map (kbd "s") 'hydra-smartparens/body)

(define-key edit-commands-map (kbd "r") 'replace-string)
(define-key edit-commands-map (kbd "C-r") 'replace-regexp)
#+end_src

** Tramp
:PROPERTIES:
:ID:       5f1f8ed1-3651-490d-8aca-cc6ca384d758
:END:

#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
#+end_src

** Buffers
:PROPERTIES:
:ID:       d86b950f-b780-49f1-a611-cf4c702a3673
:END:

#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Movement

*** Move Where I Mean Package
:PROPERTIES:
:ID:       df185c2f-c1cc-4921-840c-3c444ff07e46
:END:

#+begin_src emacs-lisp
(use-package mwim
  :config
  (global-set-key (kbd "C-a") 'mwim-beginning)
  (global-set-key (kbd "C-e") 'mwim-end-of-line-or-code))   ; lala
#+end_src

*** Expand Region
:PROPERTIES:
:ID:       e0917147-ef19-4ed3-8952-ec15cd7bdc3c
:END:

#+begin_src emacs-lisp
(use-package expand-region
  :bind
  (("C-+" . 'er/expand-region))
  :config
  (delete-selection-mode 1))
#+end_src

*** Subwords
:PROPERTIES:
:ID:       a6e339f7-cdbe-4b32-aadf-ed43aabc8098
:END:

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

*** Avy
:PROPERTIES:
:ID:       2d3a19eb-7480-40ae-858f-3611a321a8aa
:END:

#+begin_src emacs-lisp
(use-package avy
  :bind
  ("M-s M-s" . avy-goto-char)
  ("M-g M-c" . avy-goto-char)
  ("C-M-g" . avy-goto-word-0)
  ("M-g M-g" . avy-goto-line)
  ("M-g M-l" . avy-goto-line)
  ("M-j" . avy-goto-char-timer)
  :config
  (define-key isearch-mode-map (kbd "M-j") 'avy-isearch)

  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)

  (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)

  (defun avy-action-kill-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (kill-whole-line))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)
  (setf (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line)

  (defun avy-action-copy-whole-line (pt)
    (save-excursion
      (goto-char pt)
      (cl-destructuring-bind (start . end)
          (bounds-of-thing-at-point 'line)
        (copy-region-as-kill start end)))
    (select-window
     (cdr
      (ring-ref avy-ring 0)))
    t)

  (defun avy-action-yank-whole-line (pt)
    (avy-action-copy-whole-line pt)
    (save-excursion (yank))
    t)

  (setf (alist-get ?y avy-dispatch-alist) 'avy-action-yank
        (alist-get ?w avy-dispatch-alist) 'avy-action-copy
        (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
        (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line)

  (defun avy-action-teleport-whole-line (pt)
    (avy-action-kill-whole-line pt)
    (save-excursion (yank)) t)

  (setf (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
        (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line)

  (defun avy-action-mark-to-char (pt)
    (activate-mark)
    (goto-char pt))

  (setf (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char)

  (defun avy-action-capitalize (pt)
    (interactive)
    (save-excursion
      (goto-char pt)
      (avy-forward-item)
      (capitalize-region pt (point))) t)

  (setf (alist-get ?c avy-dispatch-alist) 'avy-action-capitalize)

  (defun avy-action-upcase-item (pt)
    (save-excursion
      (goto-char pt)
      (avy-forward-item)
      (upcase-region pt (point))))

  (setf (alist-get ?u avy-dispatch-alist) 'avy-action-upcase-item)

  (defun avy-action-downcase-item (pt)
    (save-excursion
      (goto-char pt)
      (avy-forward-item)
      (downcase-region pt (point))))

  (setf (alist-get ?L avy-dispatch-alist) 'avy-action-downcase-item)

  (defun avy-action-helpful (pt)
    (save-excursion
      (goto-char pt)
      (helpful-at-point))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  (setf (alist-get ?H avy-dispatch-alist) 'avy-action-helpful))
#+end_src

** Customization Through Emacs
:PROPERTIES:
:ID:       fc347ba8-aa03-4cf1-93fd-511ae20b28d1
:END:

Make =M-x customize= persistent.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file t)
#+end_src

** Private Stuff

Stuff I do not want to be checked into a public git repo can go here.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp")
(require 'work-days)
#+end_src

* System Specific

** Declarations
:PROPERTIES:
:ID:       1443235a-a748-4b0e-82f6-974bfa2c3dae
:END:

#+begin_src emacs-lisp
(defvar kk/default-font-size 150)
(defvar kk/org-refile-target "")
(defvar kk/org-roam-directory "")
(defvar kk/journal-file "")

(defvar kk/mu4e-context-name-dx "dx")
(defvar kk/mu4e-context-name-its "its")
(defvar kk/mu4e-context-name-kloess.xyz-info "1info")
(defvar kk/mu4e-context-name-kloess.xyz-karsten "2karsten")
(defvar kk/mu4e-context-name-kloess.xyz-k "3k")
(defvar kk/default-task-id "e740c514-60b7-4a32-a8f9-efe15ebca7a0")
(defvar kk/work-default-task-id "62e548e1-3189-419a-96c9-c29251578cc2")
(defvar kk/default-pomodoro-break-task-id "5abae356-1e4f-4130-9520-037b24a18822")
(defvar kk/org-agenda-appointments-use-timegrid t)
(defvar kk/mu4e-contexts '())
(defvar kk/emms-source-file-default-directory "")
(defun kk/org-agenda-auto-exclude-function (tag) nil)
(defvar kk/clock-in-parent-tasks t)
(defvar kk/contacts-files '())
#+end_src

** Allocations
:PROPERTIES:
:ID:       d6e46e0c-4556-4475-b0dd-8653b9d5beb9
:END:

#+begin_src emacs-lisp
(pcase system-name
  ("dwhpd"
   (setq kk/default-font-size 140)
   (setq org-agenda-files '("~/documents/org"
                            "~/nextcloud_work/schule/schule.org"))
   (setq kk/org-refile-target "~/documents/org/refile.org")
   (defun kk/org-agenda-auto-exclude-function (tag)
     (pcase tag
       ("HOLD"
        (concat "-" tag))
       ("WORK"
        (concat "+" tag))))
   (setq kk/journal-file "~/documents/org/journal.org.gpg")
   (setq kk/mu4e-contexts `(,kk/mu4e-context-name-dx
                            ,kk/mu4e-context-name-its))
   (setq kk/emms-source-file-default-directory "/mnt/psnas/music/")
   (setq kk/contacts-files '("~/documents/org/contacts.org")))
  ("T490s"
   (setq split-width-threshold 90)
   (setq split-height-threshold 100)
   (setq kk/default-font-size 180)
   (setq kk/org-roam-directory "~/Nextcloud/Documents/roam")
   (setq org-agenda-files `("~/Nextcloud/Documents/org"
                            "~/nextcloud_work/schule/schule.org"))
   (setq org-agenda-diary-file "~/Nextcloud/Documents/org/diary.org")
   (setq kk/org-refile-target "~/Nextcloud/Documents/org/refile.org")
   (defun kk/org-agenda-auto-exclude-function (tag)
     (pcase tag
       ("HOLD"
        (concat "-" tag))
       ("WORK"
        (concat "+" tag))))
   (setq kk/journal-file "~/Nextcloud/Documents/org/journal.org.gpg")
   (setq kk/mu4e-contexts `(,kk/mu4e-context-name-dx
                            ,kk/mu4e-context-name-its
                            ,kk/mu4e-context-name-kloess.xyz-info
                            ,kk/mu4e-context-name-kloess.xyz-karsten
                            ,kk/mu4e-context-name-kloess.xyz-k))
   (setq kk/emms-source-file-default-directory "/mnt/psnas/music/")
   (setq kk/contacts-files '("~/Nextcloud/Documents/org/contacts.org"))))
#+end_src

* Org

** General
:PROPERTIES:
:ID:       74852722-8797-415d-bc25-74e9a153b9e4
:END:

#+begin_src emacs-lisp
(defun kk/org-mode-setup ()
  "Set org-specific settings.
Intended to be used in an `org-mode-hook'."
  (visual-line-mode 1)
  (setq prettify-symbols-alist '(("[ ]" . "")
                                 ("[X]" . "")
                                 ("[-]" . "")))
  (prettify-symbols-mode)
  (setq-local display-line-numbers-type t)
  (lambda ()
    ;; Undefine C-c [ and C-c ] since this breaks my
    ;; org-agenda files when directories are include It
    ;; expands the files in the directories individually
    (org-defkey org-mode-map "\C-c[" 'undefined)
    (org-defkey org-mode-map "\C-c]" 'undefined)
    (org-defkey org-mode-map "\C-c;" 'undefined)
    (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined)))

(use-package org
  :hook
  (org-mode . kk/org-mode-setup)
  :custom
  (org-tag-persistent-alist
   '(("important" . 105)
     ("urgent" . 117)
     ("FLAGGED" . 102)
     ("MEETING" . 109)
     ("PHONE" . 112)
     ("computer" . 99)
     ("delegated" . 100)
     ("learn" . 108)
     ("maintenance" . 119)
     ("read" . 114)
     ("watch" . 115)
     ("buy" . 98)))
  :config
  (setq initial-major-mode 'org-mode)

  (setq org-startup-folded 'fold)

  (setq org-image-actual-width 500)

  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-enforce-todo-dependencies t)
  (setq org-track-ordered-property-with-tag t)

  (setq org-show-following-heading t)
  (setq org-show-hierarchy-above t)
  (setq org-show-siblings (quote ((default))))

  (setq org-catch-invisible-edits 'error)

  (setq org-global-properties
        `(("Effort_ALL" .
           ,(concat "0:10 0:20 0:30 0:45 1:00 1:30 2:00 3:00 "
                    "6:00 0:00"))))
  (setq org-columns-default-format
        (concat "#+COLUMNS: %7CATEGORY(Cat.) %7TODO(Todo) %40ITEM(Task) %TAGS(Tag) "
                "%6CLOCKSUM(Clock) %6EFFORT(Effort){:}")))
#+end_src

*** Todo Keywords
:PROPERTIES:
:ID:       74a4e252-878c-4a63-bfec-bd3f3615cd23
:END:

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t!/!)" "NEXT(n!/!)" "|" "DONE(d!/!)")
        (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "CANC(k@/!)" "PHONE" "MEETING")))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "slate blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAIT" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANC" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "dimgrey" :weight bold)
              ("MEETING" :foreground "dimgrey" :weight bold))))

(setq org-todo-state-tags-triggers
      (quote (("CANC" ("CANCELLED" . t))
              ("WAIT" ("WAITING" . t) ("checkBack"))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD") ("checkBack") ("FLAGGED"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

*** Indentation
:PROPERTIES:
:ID:       85461031-c9d3-4146-8847-191bd47f97bf
:END:

#+begin_src emacs-lisp
(setq org-indent-indentation-per-level 3)
(setq org-edit-src-content-indentation 0)
(setq org-startup-indented t)

(setq org-blank-before-new-entry '((heading . auto) (plain-list-item . nil)))
#+end_src

*** Refiling
:PROPERTIES:
:ID:       a2b00b99-bd7b-4e59-8a36-2aa3403d8e94
:END:

#+begin_src emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 9)))

(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)

(advice-add 'org-refile :after
            (lambda (&rest _)
              (org-save-all-org-buffers)))

(setq org-clone-delete-id t)

(defun kk/org-search ()
  (interactive)
  (org-refile '(4)))
#+end_src

*** Logging
:PROPERTIES:
:ID:       3cec1cc3-4108-4da2-b226-b6280fffa9b3
:END:

#+begin_src emacs-lisp
(setq org-log-done 'note)
(setq org-log-reschedule 'note)
(setq org-log-into-drawer t)

(setq org-agenda-skip-additional-timestamps-same-entry t)
(setq org-agenda-log-mode-items (quote (closed state)))

(use-package htmlize)
#+end_src

*** Clocking
:PROPERTIES:
:ID:       fc4b200f-b33c-4b66-8804-410e208d758d
:END:

#+begin_src emacs-lisp
(setq org-clock-into-drawer "CLOCKING")

;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 35)

;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)

;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)

;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)

;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)

;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)

;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))

;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

;; Agenda clock report parameters
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

(setq org-clock-clocked-in-display 'mode-line)

(setq bh/keep-clock-running t)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
                                        ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (kk/reset-org-default-task)
  (when (org-clock-is-active)
    (bh/clock-in-default-task))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-not-done-keywords)
            (setq parent-task (point))))
        (if (and parent-task kk/clock-in-parent-tasks)
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(setq bh/organization-task-id kk/work-default-task-id)

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(defun kk/org-clock-in-list ()
  (interactive)
  (org-clock-in '(4)))

(defun kk/org-clock-goto-list ()
  (interactive)
  (org-clock-goto '(4)))

(defun kk/org-clock-in-parent-tasks-toggle ()
  (interactive)
  (setq kk/clock-in-parent-tasks (not kk/clock-in-parent-tasks))
  (message (concat "Clocking in to parent task instead of default task is "
                   (if kk/clock-in-parent-tasks "ACTIVE" "INACTIVE"))))

(global-set-key (kbd "<f10>") 'org-clock-goto)
(global-set-key (kbd "C-<f10>") 'org-clock-out)
(global-set-key (kbd "C-S-<f10>") 'kk/org-clock-goto-list)
(global-set-key (kbd "<f11>") 'org-clock-in)
(global-set-key (kbd "C-<f11>") 'org-pomodoro)
(global-set-key (kbd "C-S-<f11>") 'kk/org-clock-in-list)

(defun kk/clock-in-with-point-at-id (id)
  (let ((org-clock-auto-clock-resolution nil))
    (org-with-point-at (org-id-find id 'marker)
      (org-clock-in))))

(defun kk/reset-org-default-task ()
  (interactive)
  (org-with-point-at (org-id-find kk/default-task-id 'marker)
    (set-marker org-clock-default-task (point))))

(kk/reset-org-default-task)

(defun kk/clock-in-at-time (&optional time)
  "Call `org-clock-in' and specify `START-TIME'"
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (let ((marker (org-get-at-bol 'org-hd-marker)))
        (org-clock-in nil (org-read-date t t)))
    (org-clock-in nil (org-read-date t t))))

(defun kk/clock-out-at-time ()
  "Call `org-clock-out' and specify `AT-TIME'"
  (interactive)
  (org-clock-out nil nil (org-read-date t t)))
#+end_src

**** Pomodoro
:PROPERTIES:
:ID:       0cdbe69c-6b00-469d-ad5b-d9c48a714cb8
:END:

#+begin_src emacs-lisp
(use-package org-pomodoro
  :custom
  (org-pomodoro-clock-break nil)
  (org-pomodoro-keep-killed-pomodoro-time t)
  (org-pomodoro-manual-break t)
  (org-pomodoro-format "Pom~%s")
  (org-pomodoro-short-break-format "Short Br~%s")
  (org-pomodoro-long-break-format "Long Br~%s")

  :config
  (defun kk/clock-in-pomodoro-break-task ()
    (interactive)
    (org-with-point-at (org-id-find kk/default-pomodoro-break-task-id 'marker)
      (org-clock-in)))

  (defun kk/clock-in-pomodoro-break-task-maybe ()
    (when (or (eq org-pomodoro-state :short-break)
              (eq org-pomodoro-state :long-break))
      (kk/clock-in-pomodoro-break-task)))
  (add-hook 'org-pomodoro-finished-hook 'kk/clock-in-pomodoro-break-task-maybe))
#+end_src

*** Babel
:PROPERTIES:
:ID:       f3f22b11-bb68-4b6f-a84f-be1f24788fc2
:END:

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

*** Org ID
:PROPERTIES:
:ID:       6832e9be-653e-4411-83c9-4993e4439e45
:END:

#+begin_src emacs-lisp
(require 'org-id)
(setq org-id-link-to-org-use-id t)
#+end_src

*** Contrib
:PROPERTIES:
:ID:       d6b6e0d2-ef08-441a-bdea-4e27f1da8ce8
:END:

#+begin_src emacs-lisp
(use-package org-contrib)
#+end_src

**** Org Checklist
:PROPERTIES:
:ID:       2558d47c-c070-4777-a90e-ef30c6e5043c
:END:

#+begin_src emacs-lisp
(require 'org-checklist)
#+end_src

*** URL Retrieving
:PROPERTIES:
:ID:       05e72995-9401-44f6-a16c-7566337bac5b
:END:

#+begin_src emacs-lisp
(defun kk/org-link-copy (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))

(define-key org-mode-map (kbd "C-c p") 'kk/org-link-copy)
#+end_src

*** Org Depend
:PROPERTIES:
:ID:       516b5bac-7338-4c15-8442-749129a6b553
:END:

#+begin_src emacs-lisp
(require 'org-depend)
#+end_src

*** Toc-Org
:PROPERTIES:
:ID:       ec99ed9e-b74c-473a-8f00-31b2e44b90ee
:END:

#+begin_src emacs-lisp
(use-package toc-org)
#+end_src

*** Timer
:PROPERTIES:
:ID:       4dce1e4f-347e-4117-ad01-f7bb62821eed
:END:

#+begin_src emacs-lisp
(setq org-clock-sound "~/.emacs.d/straight/build/org-pomodoro/resources/bell.wav")
#+end_src

** Agenda

*** Settings
:PROPERTIES:
:ID:       7fa5111d-0a34-4f53-b45d-9ea5fe1340db
:END:

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
(setq org-agenda-inhibit-startup t)

(setq org-sort-agenda-noeffort-is-high t)
(setq org-agenda-sort-notime-is-late nil)

(add-hook 'org-agenda-mode-hook 'hl-line-mode)

(setq org-agenda-text-search-extra-files nil)

(setq org-agenda-span 'day)

;; Use sticky agenda's so they persist
(setq org-agenda-sticky t)

(setq org-agenda-persistent-filter t)

(setq org-agenda-window-setup 'current-window)

;; (add-hook 'auto-save-hook '(lambda ()
;;                              (org-agenda-redo-all t)))

(setq org-agenda-auto-exclude-function 'kk/org-agenda-auto-exclude-function)

(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
#+end_src

*** Bulk

**** Advice
:PROPERTIES:
:ID:       4fb16c9b-7743-4ca1-8c2a-3bbb57215308
:END:

When =org-log-reschedule= is set to note, it breaks the scatter function when prompting for the note.

#+begin_src emacs-lisp
(advice-add 'org-agenda-bulk-action :around 'kk/org-agenda-bulk-action)

(defun kk/org-agenda-bulk-action (original &optional arg)
  "Call `org-agenda-bulk-action' with `org-log-reschedule' set to 'time.
When set to 'note, rescheduling or scattering breaks."
  (let ((org-log-reschedule 'time))
    (funcall original arg)))
#+end_src

*** Custom Agenda Commands
:PROPERTIES:
:ID:       7aecd838-676f-4250-812e-2a80cbfcaf99
:END:

#+begin_src emacs-lisp
(setq kk/org-agenda-stuck-projects
      '(tags-todo "-CANCELLED-HOLD/!"
                  ((org-agenda-skip-function 'bh/skip-non-stuck-projects)
                   (org-tags-match-list-sublevels 'indented)
                   (org-agenda-overriding-header "Stuck Projects")
                   (org-agenda-todo-ignore-scheduled))))

(setq org-agenda-custom-commands
      `(("A" agenda* ""
         ((org-agenda-start-on-weekday nil)
          (org-agenda-compact-blocks t)
          (org-agenda-span 'week)
          (org-super-agenda-groups nil)
          (org-agenda-use-time-grid kk/org-agenda-appointments-use-timegrid)))
        ("d" "Deadlines"
         ((agenda ""
                  ((org-deadline-warning-days 365)
                   (org-agenda-span 1)
                   (org-agenda-sorting-strategy
                    '((agenda habit-down deadline-up time-up
                              category-up todo-state-up)))
                   (org-agenda-show-all-dates nil)))
          (agenda ""
                  ((org-agenda-span 'year)
                   (org-super-agenda-groups nil)
                   (org-deadline-warning-days 0))))
         ((org-agenda-start-with-log-mode nil)
          (org-agenda-include-diary nil)
          (org-agenda-entry-types '(:deadline))))

        ("c" "Communication"
         ((tags "+PHONE|+MEETING"
                ((org-agenda-skip-function 'kk/skip-project-sub-tasks)
                 (org-agenda-sorting-strategy '(timestamp-down))))))

        ("f" . "Finances")
        ("ft" "to track"
         ((tags-todo "financetotrack"
                     ((org-super-agenda-groups nil)
                      (org-agenda-overriding-header "Track these payments")))))
        ("fp" "to pay"
         ((tags-todo "financetopay"
                     ((org-super-agenda-groups nil)
                      (org-agenda-overriding-header "Pay these"))))
         ((org-agenda-view-columns-initially t)))
        ("fw" "wait for payment"
         ((tags-todo "financeawaiting"
                     ((org-super-agenda-groups nil)
                      (org-agenda-overriding-header "Waiting for these payments"))))
         ((org-agenda-view-columns-initially t)))

        (" " "Agenda"
         ((agenda ""
                  ((org-agenda-span 1)
                   (org-agenda-skip-timestamp-if-done t)
                   (org-agenda-skip-deadline-if-done t)
                   (org-agenda-skip-scheduled-if-done t)))
          (tags "refile"
                ((org-agenda-overriding-header "Tasks to Refile")
                 (org-tags-match-list-sublevels nil)
                 (org-super-agenda-groups nil)
                 (org-agenda-skip-function 'kk/skip-project-sub-tasks)))
          (tags-todo "REWORK-refile"
                     ((org-agenda-overriding-header "Meetings and Calls to post process")
                      (org-agenda-sorting-strategy
                       '(timestamp-up))
                      (org-agenda-breadcrumbs-separator "/")
                      (org-agenda-prefix-format
                       '((tags . " %i %-12:c %(concat (kk/org-agenda-get-parent-task-string) \"->\")")))))
          (tags-todo "+TODO=\"WAIT\""
                     ((org-agenda-overriding-header "Unscheduled Waits")
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled 'all)))
          ,kk/org-agenda-stuck-projects
          (tags-todo "-HOLD-CANCELLED/!"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function 'bh/skip-non-projects)
                      (org-tags-match-list-sublevels 'indented)
                      (org-agenda-sorting-strategy
                       '(category-keep))))
          (tags-todo "-CANCELLED/!NEXT"
                     ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                      (org-tags-match-list-sublevels t)
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy
                       '(todo-state-down effort-up category-keep))))
          (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                     ((org-agenda-overriding-header (concat "Project Subtasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'bh/skip-non-project-tasks)
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy
                       '(category-keep))))
          (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                     ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-skip-function 'bh/skip-project-tasks)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy
                       '(todo-state-down category-keep))))
          (tags-todo "-CANCELLED&+HOLD|-CANCELLED&+WAITING/!"
                     ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-skip-function 'bh/skip-non-tasks)
                      (org-tags-match-list-sublevels nil)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
          (tags "-REFILE/"
                ((org-agenda-overriding-header "Tasks to Archive")
                 (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                 (org-tags-match-list-sublevels nil))))
         ((org-agenda-compact-blocks t)
          (org-agenda-dim-blocked-tasks nil)))))
#+end_src

*** Custom Functions

#+begin_src emacs-lisp
(defun kk/org-agenda-get-parent-task-string ()
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (org-up-heading-safe)
        (org-entry-get nil "ITEM")))))
#+end_src

*** Org-Super-Agenda
:PROPERTIES:
:ID:       83c799db-88d6-4573-bfa9-8252f2042c2b
:END:

#+begin_src emacs-lisp
(use-package org-super-agenda
  :custom
  (org-super-agenda-header-separator "")
  (org-super-agenda-mode t)
  (org-super-agenda-unmatched-name "General")
  (org-super-agenda-groups
   '((:name "Events"
            :pred kk/org-hour-specification-p
            :time-grid t)
     (:name "Urgent"
            :tag "urgent")
     (:name "Important"
            :tag "important")
     (:name "Flagged"
            :tag "FLAGGED")
     (:name "Due today"
            :deadline today)
     (:name "Overdue"
            :deadline past)
     (:name "Due soon"
            :deadline future)
     (:name "Anniversarys"
            :category ("birthday" "anniversary"))
     (:name "Pets"
            :tag "pets"
            :order 107)
     (:name "Finances"
            :tag "finance"
            :order 107)
     (:name "Learn"
            :tag "learn"
            :order 115)
     (:name "Vehicles"
            :category "vehicle"
            :order 120)
     (:name "Emacs"
            :category "emacs"
            :tag "emacs"
            :order 130)
     (:name "other Maintenance"
            :tag ("hygiene" "maintenance")
            :order 111)
     (:name "Habits"
            :habit t
            :order 150)
     (:name "Media"
            :category "media"
            :tag ("read" "watch")
            :order 130)
     (:name "Quick Picks"
            :and (:effort< "0:16" :not (:pred kk/org-hour-specification-p)))
     (:name "Scheduled earlier"
            :scheduled past
            :order 101)))
  :config
  (defun kk/org-hour-specification-p (item)
    (s-matches? "[0-9][0-9]?:[0-9][0-9]" item))

  (defun kk/org-super-agenda-mode-toggle ()
    (interactive)
    (if org-super-agenda-mode
        (org-super-agenda-mode -1)
      (org-super-agenda-mode))
    (org-agenda-redo-all)))
#+end_src

** Capture Templates
:PROPERTIES:
:ID:       50b809d1-3266-49a1-8e99-b5a874f84339
:END:

#+begin_src emacs-lisp
(define-key global-map (kbd "C-c j")
            (lambda () (interactive) (org-capture nil)))

(defvar my/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{Address}
:BIRTHDAY: %^{Birthday}
:EMAIL: %(org-contacts-template-email)
:END:
:LOGBOOK:
- Added: %U
- Added From: %a
:END:" "Template for org-contacts.")

(setq org-capture-templates
      `(("t" "Task" entry (file kk/org-refile-target)
         "* TODO %?\n:LOGBOOK:\n- Added: %U\n- Added From: %a\n:END:\n%i"
         :empty-lines 0 :clock-in t :clock-resume t)
        ("u" "Urgent Task" entry (file kk/org-refile-target)
         "* TODO %? :urgent:\nSCHEDULED: %t\n:LOGBOOK:\n- Added: %U\n- Added From: %a\n:END:\n%i"
         :empty-lines 0 :clock-in t :clock-resume t)
        ("n" "Note" entry (file kk/org-refile-target)
         "* %?\n:LOGBOOK:\n- Added: %U\n- Added From: %a\n:END:\n%i"
         :empty-lines 0 :clock-in t :clock-resume t)

        ("f" "Finances")
        ("ft" "to track" entry (file kk/org-refile-target)
         "* TODO Expense: %?\n:LOGBOOK:\n- Added: %U\n- Added From: %a\n:END:\n%i"
         :empty-lines 0 :clock-in t :clock-resume t)
        ("fp" "to pay" entry (file kk/org-refile-target)
         "* TODO %?\nSCHEDULED: %t\n:PROPERTIES:\n:PAYEE: %^{PAYEE}\n:AMOUNT: %^{AMOUNT}\n:END:\n:LOGBOOK:\n- Added: %U\n- Added From: %a\n:END:\n%i"
         :empty-lines 0 :clock-in t :clock-resume t)
        ("fw" "awaiting payment" entry (file kk/org-refile-target)
         "* WAIT %?\n:PROPERTIES:\n:DEBTOR: %^{DEBTOR}\n:AMOUNT: %^{AMOUNT}\n:END:\n:LOGBOOK:\n- Added: %U\n- Added From: %a\n:END:\n%i"
         :empty-lines 0 :clock-in t :clock-resume t)

        ("m" "Meeting" entry (file kk/org-refile-target)
         "* MEETING %? :MEETING:\n:LOGBOOK:\n- Started: %U\n- Started From: %a\n:END:\n\n- \n\n\n** TODO Nacharbeit :REWORK:NOARCH:\n" :clock-in t :clock-resume t)
        ("p" "Phone call" entry (file kk/org-refile-target)
         "* PHONE %? :PHONE:\n:LOGBOOK:\n- Started: %U\n- Started From: %a\n:END:\n\n- \n\n\n** TODO Nacharbeit :REWORK:NOARCH:\n" :clock-in t :clock-resume t)

        ("j" "Journal" entry
         (file+olp+datetree kk/journal-file)
         "\n* %<%H:%M> Uhr\n\n%?\n\n"
         :clock-in :clock-resume :empty-lines 1)

        ("Mb" "Books" entry
         (file kk/org-refile-target)
         "* TODO %^{Description}\n:PROPERTIES:\n:PAGES: %^{Pages}\n:GENRE: %^{Genre}\n:RECOMMENDED: %^{Recommended By}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:" :clock-in t :clock-resume t)
        ("Mm" "Movies" entry
         (file kk/org-refile-target)
         "* TODO %^{Description}\n:PROPERTIES:\n:LENGTH: %^{Length}\n:GENRE: %^{Genre}\n:RECOMMENDED: %^{Recommended By}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:" :clock-in t :clock-resume t)
        ("Ms" "TV Shows" entry
         (file kk/org-refile-target)
         "* TODO %^{Description}\n:PROPERTIES:\n:SEASONS: %^{Seasons}\n:GENRE: %^{Genre}\n:RECOMMENDED: %^{Recommended By}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:" :clock-in t :clock-resume t)

        ("M" "Media")
        ("c" "Contact" entry (file kk/org-refile-target),
         my/org-contacts-template
         :empty-lines 1)))
#+end_src

*** Hooks
:PROPERTIES:
:ID:       8b137f24-3a90-4dfa-b731-379c9d10b598
:END:

#+begin_src emacs-lisp
(defun kk/org-set-done-task-if-buffer-name-equal (task-id buffer)
  (interactive)
  (when (equal (expand-file-name (buffer-name))
               (expand-file-name buffer))
    (kk/org-set-done-with-point-at-id task-id)))

(defun kk/org-set-done-with-point-at-id (id)
  (org-with-point-at (org-id-find id 'marker)
    (org-todo 'done)))

(add-hook 'org-capture-before-finalize-hook `(lambda ()
                                               (kk/org-set-done-task-if-buffer-name-equal "5a47ad5a-627c-4af1-a1c6-08b5fcee04f8"
                                                                                          ,(concat "CAPTURE-"
                                                                                                   (file-name-nondirectory kk/journal-file)))) 'append)
#+end_src

** Structure Templates
:PROPERTIES:
:ID:       7ce3f595-e2d7-4fe3-915c-e425069e751f
:END:

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("c#" . "src csharp"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))
(add-to-list 'org-structure-template-alist '("ym" . "src yaml"))
(add-to-list 'org-structure-template-alist '("php" . "src php"))
#+end_src

** Keybindings
:PROPERTIES:
:ID:       7d58f47e-cee0-4873-87d1-94284520157a
:END:

#+begin_src emacs-lisp
(global-set-key (kbd "<f12>") 'org-agenda)

(global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** Font And Display
:PROPERTIES:
:ID:       7084e52f-9183-4ee7-ad73-a2585570a273
:END:

#+begin_src emacs-lisp
(defun kk/org-font-setup ()
  "Set `org-mode' specific font settings."
  (interactive)
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1)
                                                          (match-end 1) "•"))))))
  (prettify-symbols-mode))

(setq org-alphabetical-lists t)
(setq org-list-demote-modify-bullet (quote (("+" . "-")
                                            ("*" . "-")
                                            ("1." . "-")
                                            ("1)" . "-")
                                            ("A)" . "-")
                                            ("B)" . "-")
                                            ("a)" . "-")
                                            ("b)" . "-")
                                            ("A." . "-")
                                            ("B." . "-")
                                            ("a." . "-")
                                            ("b." . "-"))))

(setq org-ellipsis " ⤵")

(use-package org-bullets
  :after org
  :hook
  (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Bernt Hansen code snippets
:PROPERTIES:
:ID:       a2c9914f-362f-48c2-960d-0f852ce466a6
:END:

#+begin_src emacs-lisp
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))
(bind-key (kbd "C-c C-x n") 'bh/toggle-next-task-display org-agenda-mode-map)
(bind-key (kbd "W") 'bh/toggle-next-task-display org-agenda-mode-map)

(setq kk/stuck-projects-regexp "^\\*+ NEXT")
(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward kk/stuck-projects-regexp subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward kk/stuck-projects-regexp subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun kk/skip-project-sub-tasks ()
  "Show single and project tasks.
Skip sub-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if (or subtree-is-current
                        (member "NOARCH" (org-get-tags-at))
                        (kk/project-task-where-project-is-done-p))
                    subtree-end ; Has a date in this month or last month or has NOARCH tag or it is a project task and that is done too, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

(defun kk/project-task-where-project-is-done-p ()
  "A task that is a project sub task and that project is done."
  (interactive)
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (org-entry-is-done-p)
          t
        nil))))

;;;; Refile settings
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

(defun bh/mark-next-parent-tasks-todo ()
  "Visit each parent task and change NEXT states to TODO"
  (let ((mystate (or (and (fboundp 'org-state)
                          state)
                     (nth 2 (org-heading-components)))))
    (when mystate
      (save-excursion
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) (list "NEXT"))
            (org-todo "TODO")))))))

(add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
(add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)


(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))
#+end_src

** Habits
:PROPERTIES:
:ID:       c642846e-ca64-4690-9127-c499d2e939ab
:END:

#+begin_src emacs-lisp
(setq org-habit-show-habits-only-for-today nil)
(setq org-habit-completed-glyph ?X)
(setq org-habit-today-glyph ?)
(setq org-habit-graph-column 53)

                                        ; When deactivating habit display via 'K', pull them up again on the next day
(run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
#+end_src

** Roam
:PROPERTIES:
:ID:       29a3e863-3bc5-4f9c-9ef9-3129e057892e
:END:

[[https://www.orgroam.com/manual.html#Org_002droam-Protocol][Information on how to set up org-roam-protocol.]]

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory kk/org-roam-directory)
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :config
  (org-roam-setup)
  (require 'org-roam-graph)
  (require 'org-roam-protocol)
  (setq org-roam-mode-section-functions
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section))
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.33)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t))))))
#+end_src

** Contacts
:PROPERTIES:
:ID:       66527cda-1323-4a62-a46c-7d1e6ec85d19
:END:

#+begin_src emacs-lisp
(require 'org-contacts)
(setq org-contacts-files kk/contacts-files)
(setq org-contacts-birthday-format "%l (%Y)")
#+end_src

** Org-Protocol
:PROPERTIES:
:ID:       be2f09b8-74d9-4aa9-968d-d5e179c9f196
:END:

#+begin_src emacs-lisp
(use-package org-protocol
  :straight nil
  :config
  (defun kk/org-protocol-set-done-with-point-at-id (id)
    (org-with-point-at (org-id-find id 'marker)
      (org-todo "DONE"))
    nil)
  (defun kk/org-protocol-clock-in-with-point-at-id (id)
    (let ((org-clock-auto-clock-resolution nil))
      (org-with-point-at (org-id-find id 'marker)
        (org-clock-in)))
    nil)
  (defun kk/org-protocol-clock-out (id)
    (org-clock-out)
    nil)
  (add-to-list 'org-protocol-protocol-alist
               '("Set Done"
                 :protocol "org-done"
                 :function kk/org-protocol-set-done-with-point-at-id
                 :kill-client t))
  (add-to-list 'org-protocol-protocol-alist
               '("Clock Out"
                 :protocol "clock-out"
                 :function kk/org-protocol-clock-out
                 :kill-client t))
  (add-to-list 'org-protocol-protocol-alist
               '("Clock In"
                 :protocol "clock-in"
                 :function kk/org-protocol-clock-in-with-point-at-id
                 :kill-client t)))
#+end_src

** Org Recent Headings
:PROPERTIES:
:ID:       74adf8cb-6507-44e8-8fdc-c7a22938d69b
:END:

#+begin_src emacs-lisp
(use-package org-recent-headings
  :config (org-recent-headings-mode))
#+end_src

** Org-mime
:PROPERTIES:
:ID:       2bb5cb92-6329-4b11-882c-4b9a3411c40f
:END:

#+begin_src emacs-lisp
(use-package org-mime
  :config
  (setq org-mime-export-options '(:section-numbers nil
                                                   :with-author nil
                                                   :with-toc nil))
  (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
  (add-hook 'org-mime-html-hook
            (lambda nil
              (org-mime-change-element-style
               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                             "#f6f6f6" "#2f3337")))))
#+end_src

** Skeletons
:PROPERTIES:
:ID:       382043dd-32e3-4682-8ecd-f997a727ba25
:END:

#+begin_src emacs-lisp
(define-skeleton kk/org-table-pros-cons
  "Insert a table with pro and con heads" nil
  "| pro | con |\n"
  "|-----+-----|\n"
  "|     |     |\n")
#+end_src

** Org-download
:PROPERTIES:
:ID:       6caffca1-101a-4c8e-ba31-94715747ef12
:END:

#+begin_src emacs-lisp
(use-package org-download
  :custom
  (org-download-method 'attach))
#+end_src

** Org-ql
:PROPERTIES:
:ID:       8d5d71e7-5be7-470f-a5bb-4d8ffd4e2ccb
:END:

#+begin_src emacs-lisp
(use-package org-ql)
#+end_src

** Weekly Review

#+begin_src emacs-lisp
(setq kk/weekly-review-personal-or-work 'personal)
(defun kk/weekly-review-toggle-personal-work ()
  (interactive)
  (setq kk/weekly-review-personal-or-work
        (if (eq kk/weekly-review-personal-or-work 'personal)
            'work
          'personal))
  (kk/weekly-review-current-state-message))
(defun kk/weekly-review-review-all ()
  (interactive)
  (setq kk/weekly-review-personal-or-work 'all)
  (kk/weekly-review-current-state-message))

(defun kk/weekly-review-current-state-message ()
  (interactive)
  (message (concat "Currently reviewing "
                   (pcase kk/weekly-review-personal-or-work
                     ('personal
                      "personal")
                     ('work
                      "work")
                     ('all
                      "all")))))

(defun kk/weekly-review-filter-string ()
  (pcase kk/weekly-review-personal-or-work
    ('personal
     "+PERSONAL")
    ('work
     "+WORK")
    (t
     nil)))

(defun kk/weekly-review-agenda ()
  (interactive)
  (let ((org-agenda-sticky nil)
        (org-habit-show-habits nil)
        (org-agenda-span 'week)
        (org-super-agenda-groups nil)
        (org-agenda-tag-filter-preset
         (list "-HOLD"))
        (additional-filters (kk/weekly-review-filter-string)))
    (when additional-filters (add-to-list 'org-agenda-tag-filter-preset additional-filters))
    (org-agenda-list)))

(defun kk/weekly-review-clock-report ()
  (interactive)
  (let ((org-agenda-sticky nil)
        (org-agenda-span 'week)
        (org-agenda-max-entries 0))
    (org-agenda-list))
  (message "Press R!"))

(defun kk/weekly-review-clocking-data ()
  (interactive)
  (org-super-agenda-mode -1)
  (let ((org-agenda-sticky nil)
        (org-agenda-span 'week)
        (org-agenda-max-entries 0))
    (org-agenda-list))
  (message "Press v c!"))

(defun kk/weekly-review-hold ()
  (interactive)
  (let ((org-agenda-sticky nil)
        (org-agenda-tag-filter-preset '())
        (additional-filters (kk/weekly-review-filter-string)))
    (when additional-filters (add-to-list 'org-agenda-tag-filter-preset additional-filters))
    (org-todo-list 5)))

(defun kk/weekly-review-mail-inbox ()
  (interactive)
  (mu4e-headers-search (pcase kk/weekly-review-personal-or-work
                         ('work
                          "maildir:/karsten.kloess@its-stuttgart.de/INBOX OR maildir:/kloess@digital-worx.de/INBOX")
                         ('personal
                          "maildir:/info@kloess.xyz/INBOX OR maildir:/karsten@kloess.xyz/INBOX OR maildir:/k@kloess.xyz/INBOX")
                         (t
                          "maildir:/info@kloess.xyz/INBOX OR maildir:/karsten@kloess.xyz/INBOX OR maildir:/k@kloess.xyz/INBOX maildir:/karsten.kloess@its-stuttgart.de/INBOX OR maildir:/kloess@digital-worx.de/INBOX"))))

(defun kk/weekly-review-deadlines ()
  (interactive)
  (let ((org-agenda-sticky nil)
        (org-super-agenda-groups nil)
        (org-agenda-use-time-grid nil)
        (org-agenda-tag-filter-preset
         '("-HOLD"))
        (additional-filters (kk/weekly-review-filter-string)))
    (when additional-filters (add-to-list 'org-agenda-tag-filter-preset additional-filters))
    (org-agenda nil "d")))

(defun kk/weekly-review-standalone ()
  (interactive)
  (let ((org-agenda-sticky nil)
        (org-agenda-tag-filter-preset
         '("-HOLD"))
        (additional-filters (kk/weekly-review-filter-string)))
    (when additional-filters (add-to-list 'org-agenda-tag-filter-preset additional-filters))
    (org-agenda nil " ")
    (search-forward-regexp "^Standalone Tasks$")
    (recenter-top-bottom 0)))
#+end_src

** Export

*** Latex

**** General

#+begin_src emacs-lisp
(setq org-latex-caption-above nil)
(add-to-list 'org-latex-packages-alist
             '("margin=2cm" "geometry"))
#+end_src

**** Use Other Languages with LaTeX
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist
             '("ngerman" "babel" t ("pdflatex")))
(add-to-list 'org-latex-packages-alist
             '("AUTO" "polyglossia" t ("xelatex" "lualatex")))
#+end_src

* Development

** General

*** Version Control

**** General
:PROPERTIES:
:ID:       8d5d904c-3feb-4cc0-ab30-b8223bde038f
:END:

#+begin_src emacs-lisp
(defun kk/vc--log-edit-files-prompt ()
  "Helper completion for `kk/vc-extract-file-name'."
  (let ((files (or (log-edit-files)
                   (magit-staged-files))))
    (completing-read
     "Derive shortname from: " files nil nil)))

(defun kk/vc-git-log-edit-extract-file-name ()
  "Insert at point shortname from file in log edit buffers.
If multiple files are part of the log, a minibuffer completion
prompt will be produced: it can be used to narrow down to an
existing item or input an arbitrary string of characters.

This is taken from
https://protesilaos.com/dotemacs/#h:31deeff4-dfae-48d9-a906-1f3272f29bc9
and slightly modified to work with Magit as well."
  (interactive)
  (unless (or (derived-mode-p 'log-edit-mode)
              (equal (buffer-name) "COMMIT_EDITMSG"))
    (user-error "Only try this in Log Edit mode or a Magit commit buffer."))
  (let* ((files (or (log-edit-files)
                    (magit-staged-files)))
         (file (if (> (length files) 1)
                   (kk/vc--log-edit-files-prompt)
                 (car files)))
         (name (file-name-sans-extension
                (file-name-nondirectory
                 file))))
    (insert (concat name ": "))))

(define-key vc-git-log-edit-mode-map (kbd "C-C C-n") #'kk/vc-git-log-edit-extract-file-name)
(define-key text-mode-map (kbd "C-C C-n") #'kk/vc-git-log-edit-extract-file-name)
#+end_src

**** VC

Default VC bindings (taken from [[https://www.emacswiki.org/emacs/VersionControl][emacs wiki]]):

C-x v v     vc-next-action -- perform the next logical control operation on file
C-x v i     vc-register -- add a new file to version control
C-x v +     vc-update -- Get latest changes from version control
C-x v ~     vc-version-other-window -- look at other revisions
C-x v =     vc-diff -- diff with other revisions
C-x v u     vc-revert-buffer -- undo checkout
C-x v c     vc-cancel-version -- delete the latest revision (often it makes more sense to look at an old revision and check that in again!)
C-x v d     vc-directory -- show all files which are not up to date
C-x v g     vc-annotate -- show when each line in a tracked file was added and by whom
C-x v s     vc-create-snapshot -- tag all the files with a symbolic name
C-x v r     vc-retrieve-snapshot -- undo checkouts and return to a snapshot with a symbolic name
C-x v l     vc-print-log -- show log (not in ChangeLog format)
C-x v a     vc-update-change-log -- update ChangeLog
C-x v m     vc-merge
C-x v h     vc-insert-headers
M-x vc-resolve-conflicts -- pop up an ediff-merge session on a file with conflict markers

**** Magit
:PROPERTIES:
:ID:       a9ef789b-24c9-4caf-a4bb-3152b073becd
:END:

#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src

*** Parenthesis

**** Rainbow Delimiters
:PROPERTIES:
:ID:       96a5d5e7-2058-44cb-ba58-98158c6b89bf
:END:

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

**** Show-Paren-Mode
:PROPERTIES:
:ID:       3cdc25e8-501b-465c-8f8a-96d3009f09b0
:END:
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

**** Smartparens
:PROPERTIES:
:ID:       1e23f124-2a25-4c9a-916e-29758dcd8277
:END:
#+begin_src emacs-lisp
(use-package smartparens
  :defer t
  :custom
  (smartparens-global-mode t)
  :config
  (require 'smartparens-config))
#+end_src

*** Dumb Jump
:PROPERTIES:
:ID:       66b1e084-cdee-4183-aa59-68f39a0afbf8
:END:

#+begin_src emacs-lisp
(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src

*** Editorconfig

#+begin_src emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+end_src

** SQL
:PROPERTIES:
:ID:       53abfe7e-0638-4388-bb7e-9d26d2e3d19e
:END:

#+begin_src emacs-lisp
(use-package sqlformat)
#+end_src

** Web

*** Web-Mode
:PROPERTIES:
:ID:       c1b28e7a-a861-4c68-8d2f-f1cfafb6cd35
:END:

#+begin_src emacs-lisp
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+end_src

*** Emmet
:PROPERTIES:
:ID:       c179bdcb-6226-4428-851b-549aaae21477
:END:

#+begin_src emacs-lisp
(use-package emmet-mode)
#+end_src

*** Know Your HTTP Well
:PROPERTIES:
:ID:       de4ab145-94e0-4d39-a583-38e11e93f092
:END:

#+begin_src emacs-lisp
(use-package know-your-http-well
  :defer t)
#+end_src

** C#
:PROPERTIES:
:ID:       019c9562-c793-4a74-a688-2e18a1184514
:END:

#+begin_src emacs-lisp
(use-package csharp-mode)
#+end_src

** Markdown
:PROPERTIES:
:ID:       68753fa0-fc10-4279-97f1-9be801219a75
:END:

#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

* File Management

** Dired
:PROPERTIES:
:ID:       919bb05a-59a8-48b1-9cd9-93504a3db3c3
:END:

#+begin_src emacs-lisp
(use-package dired
  :straight nil
  :bind
  (("C-x C-j" . dired-jump))
  :custom
  ((dired-listing-switches "-Alh --group-directories-first"))
  :hook
  (dired-mode . dired-hide-details-mode)
  :config
  (bind-key "." 'kk/dired-dotfiles-toggle 'dired-mode-map)
  (define-key dired-mode-map (kbd "C-c o") 'kk/dired-open-file))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(defun kk/dired-dotfiles-toggle ()
  "Show/hide dot-files"
  (interactive)
  (when (equal major-mode 'dired-mode)
    (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
        (progn
          (set (make-local-variable 'dired-dotfiles-show-p) nil)
          (message "h")
          (dired-mark-files-regexp "^\\\.")
          (dired-do-kill-lines))
      (progn (revert-buffer) ; otherwise just revert to re-show
             (set (make-local-variable 'dired-dotfiles-show-p) t)))))

(defun kk/dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))
#+end_src

* Communication

** Mail (mu4e)

*** Signatures
:PROPERTIES:
:ID:       d61fb091-9bfe-452e-8c05-a9c85f5fcd9a
:END:

#+begin_src emacs-lisp
(defun kk/mu4e-choose-signature ()
  "Insert one of a number of sigs."
  (interactive)
  (let ((message-signature
         (mu4e-read-option "Signature:"
                           '(("work" .
                              (concat
                               "-------------------------------------\n"
                               "digital worx GmbH\n"
                               "Schulze-Delitzsch-Str. 16\n"
                               "70565 Stuttgart\n"
                               "\n"
                               "Tel. 0711 220 40 93 0\n"
                               "Fax. 0711 220 40 93 44\n"
                               "\n"
                               "kloess@digital-worx.de\n"
                               "\n"
                               "http://www.digital-worx.de\n"
                               "-------------------------------------\n"
                               "Geschaeftsfuehrer:\n"
                               "Sven Rahlfs\n"
                               "Mirko Ross\n"
                               "\n"
                               "HRB 22 5281 Amtsgericht Stuttgart\n"
                               "USt.-Id. Nr.: DE218401190\n"
                               "-------------------------------------"))))))
    (message-insert-signature)))
#+end_src

*** General
:PROPERTIES:
:ID:       b05fad93-c979-448e-8e67-1c6fb154993e
:END:

#+begin_src emacs-lisp
(use-package mu4e
  :straight nil
  :custom
  (mu4e-confirm-quit nil)
  :config
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  ;; Display options
  (setq mu4e-view-show-images t)
  (setq mu4e-view-show-addresses 't)
  (setq mu4e-headers-include-related nil)

  (setq mail-user-agent 'mu4e-user-agent)

  (dolist (map '(mu4e-main-mode-map
                 mu4e-view-mode-map
                 mu4e-headers-mode-map))
    (progn
      (bind-key "C-c h" #'hydra-mail/body map)
      (bind-key "," #'mu4e-context-switch map)))
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using mbsync every 5 minutes
  (setq mu4e-update-interval (* 5 60))
  (setq mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/mbsyncrc")
  (setq mu4e-maildir "~/.local/share/mail")

  ;; Configure the function to use for sending mail
  (setq sendmail-program "/usr/bin/msmtp"
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-send-mail-with-sendmail)

  (setq mu4e-compose-format-flowed t)

  (bind-key "C-c C-w" #'kk/mu4e-choose-signature mu4e-compose-mode-map)
  (bind-key "C-c h" #'hydra-mail-compose/body mu4e-compose-mode-map)
  (global-set-key (kbd "C-c m") 'mu4e))
#+end_src

*** Contacts
:PROPERTIES:
:ID:       bd023c75-ef83-4940-ba60-111d830abb33
:END:

#+begin_src emacs-lisp
(setq mu4e-org-contacts-file kk/org-refile-target)
(add-to-list 'mu4e-headers-actions
             '("org-contact-add" . mu4e-action-add-org-contact) t)
(add-to-list 'mu4e-view-actions
             '("org-contact-add" . mu4e-action-add-org-contact) t)
#+end_src

*** Context Macro
:PROPERTIES:
:ID:       45186652-daff-4bd2-8142-b3d02cf48c5c
:END:

#+begin_src emacs-lisp
(cl-defmacro df/mu4e-context (&key c-name maildir mail smtp
                                   (smtp-mail mail)
                                   (smtp-port 587)
                                   (smtp-type 'starttls)
                                   (sent-action 'sent)
                                   (name "Karsten Klöss")
                                   (sig "Karsten Klöss"))
  (let
      ((inbox      (concat "/" maildir "/Inbox"))
       (sent       (concat "/" maildir "/Sent"))
       (trash      (concat "/" maildir "/Trash"))
       (refile     (concat "/" maildir "/Archive"))
       (draft      (concat "/" maildir "/Drafts"))
       (junk       (concat "/" maildir "/Junk"))
       (c-name     (if (symbolp c-name) (symbol-value c-name) c-name)))

    `(make-mu4e-context
      :name ,c-name
      :match-func (lambda (msg)
                    (when msg
                      (string-match-p (concat "^/" ,maildir "/")
                                      (mu4e-message-field msg :maildir))))
      :enter-func (lambda ()
                    (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                      (revert-buffer)))
      :vars '((user-mail-address . ,mail)
              (user-full-name . ,name)
              (mu4e-sent-folder . ,sent)
              (mu4e-drafts-folder . ,draft)
              (mu4e-trash-folder . ,trash)
              (mu4e-refile-folder . ,refile)
              (mu4e-compose-signature . (concat ,sig))
              (mu4e-sent-messages-behavior . ,sent-action)
              (smtpmail-smtp-user . ,smtp-mail)
              (smtpmail-starttls-credentials . ((,smtp ,smtp-port nil nil)))
              (smtpmail-auth-credentials . '((,smtp ,smtp-port ,smtp-mail nil)))
              (smtpmail-default-smtp-server . ,smtp)
              (smtpmail-smtp-server . ,smtp)
              (smtpmail-stream-type . ,smtp-type)
              (smtpmail-smtp-service . ,smtp-port)
              (org-msg-signature . ,sig)
              (mu4e-maildir-shortcuts .
                                      ((,inbox   . ?i)
                                       (,sent    . ?s)
                                       (,trash   . ?t)
                                       (,refile  . ?a)
                                       (,draft   . ?d)
                                       (,junk    . ?j)))
              (mu4e-bookmarks .
                              ((:name ,(concat "Unread " c-name) :query ,(concat "m:/" maildir "/ AND flag:unread AND NOT flag:trashed") :key ?u)
                               (:name ,(concat "Today's messages " c-name) :query ,(concat "m:/" maildir "/ AND date:today..now") :key ?t)
                               (:name ,(concat "Last 7 days " c-name) :query ,(concat "m:/" maildir "/ AND date:7d..now") :hide-unread t :key ?w)
                               (:name ,(concat "Messages with calendar files " c-name) :query ,(concat "m:/" maildir "/ mime:text/calendar") :key ?i)
                               (:name ,(concat "Messages with attachments " c-name) :query ,(concat "m:/" maildir "/ flag:attach") :key ?a)
                               (:name ,(concat "Messages with images " c-name) :query ,(concat "m:/" maildir "/ mime:image/*") :key ?p)
                               (:name "All Unread" :query "flag:unread" :key ?x)))))))
#+end_src

*** Contexts
:PROPERTIES:
:ID:       a9a41e4e-f62a-4ca7-9785-4e75658dc6bf
:END:

#+begin_src emacs-lisp
(defun kk/mu4e-context-should-be-available-p (context-name)
  (if (member context-name kk/mu4e-contexts) t nil))

(when (kk/mu4e-context-should-be-available-p kk/mu4e-context-name-dx)
  (add-to-list 'mu4e-contexts
               (df/mu4e-context
                :c-name kk/mu4e-context-name-dx
                :maildir "kloess@digital-worx.de"
                :mail "kloess@digital-worx.de"
                :smtp ""
                :sig (concat
                      "-------------------------------------\n"
                      "digital worx GmbH\n"
                      "Schulze-Delitzsch-Str. 16\n"
                      "70565 Stuttgart\n"
                      "\n"
                      "Tel. 0711 220 40 93 0\n"
                      "Fax. 0711 220 40 93 44\n"
                      "\n"
                      "kloess@digital-worx.de\n"
                      "\n"
                      "http://www.digital-worx.de\n"
                      "-------------------------------------\n"
                      "Geschaeftsfuehrer:\n"
                      "Sven Rahlfs\n"
                      "Mirko Ross\n"
                      "\n"
                      "HRB 22 5281 Amtsgericht Stuttgart\n"
                      "USt.-Id. Nr.: DE218401190\n"
                      "-------------------------------------")) t))

(when (kk/mu4e-context-should-be-available-p kk/mu4e-context-name-its)
  (add-to-list 'mu4e-contexts
               (df/mu4e-context
                :c-name kk/mu4e-context-name-its
                :maildir "karsten.kloess@its-stuttgart.de"
                :mail "karsten.kloess@its-stuttgart.de"
                :smtp "") t))

(when (kk/mu4e-context-should-be-available-p kk/mu4e-context-name-kloess.xyz-info)
  (add-to-list 'mu4e-contexts
               (df/mu4e-context
                :c-name kk/mu4e-context-name-kloess.xyz-info
                :maildir "info@kloess.xyz"
                :mail "info@kloess.xyz"
                :smtp "") t))

(when (kk/mu4e-context-should-be-available-p kk/mu4e-context-name-kloess.xyz-karsten)
  (add-to-list 'mu4e-contexts
               (df/mu4e-context
                :c-name kk/mu4e-context-name-kloess.xyz-karsten
                :maildir "karsten@kloess.xyz"
                :mail "karsten@kloess.xyz"
                :smtp ""
                :sig "Karsten") t))

(when (kk/mu4e-context-should-be-available-p kk/mu4e-context-name-kloess.xyz-k)
  (add-to-list 'mu4e-contexts
               (df/mu4e-context
                :c-name kk/mu4e-context-name-kloess.xyz-k
                :maildir "k@kloess.xyz"
                :mail "k@kloess.xyz"
                :smtp ""
                :sig "Karsten")t ))
#+end_src

*** Block Mail
:PROPERTIES:
:ID:       d6ac1132-911f-49d0-af2f-b07498122171
:END:

#+begin_src emacs-lisp
(defun kk/mail-block-by-regex (regexp)
  (interactive "sRegex: ")
  (eshell-command (format "blockmailbyheaderregex \"%s\"" regexp)))

(defun kk/mail-block-by-sender (sender)
  (interactive "sSender: ")
  (kk/mail-block-by-regex (format "^From:.*%s.*" sender)))

(defun kk/mail-block-by-subject (subject)
  (interactive "sSubject: ")
  (kk/mail-block-by-regex (format "^Subject:.*%s.*" subject)))
#+end_src

*** Storing Queries
:PROPERTIES:
:ID:       70a59cd1-5937-4906-8d9d-7b22aaf23241
:END:

#+begin_src emacs-lisp
(defun kk/store-link-to-mu4e-query ()
  (interactive)
  (let ((mu4e-org-link-query-in-headers-mode t))
    (call-interactively 'org-store-link)))
(bind-key "C-c l" #'kk/store-link-to-mu4e-query mu4e-headers-mode-map)
#+end_src

*** Query on empty Subject
:PROPERTIES:
:ID:       b4abbf08-d61e-4f2d-9e3a-094503ccbc62
:END:

#+begin_src emacs-lisp
(defun kk/mail-confirm-when-no-subject ()
  "Prompts whether to send email if the Subject is empty."
  (let ((found-subject (save-excursion
                         (save-restriction
                           (widen)
                           (goto-char (point-min))
                           (search-forward-regexp "^Subject: .+$" nil t)))))
    (when (and (not found-subject)
               (not (y-or-n-p "It seems you forgot to add a subject; send anyway? ")))
      (setq quit-flag t))))
(add-hook 'message-send-hook 'kk/mail-confirm-when-no-subject)
#+end_src

*** Attachments via dired
:PROPERTIES:
:ID:       8a12bab1-7f99-4ee3-883f-92d3111bee3a
:END:

==C-c C-m C-a= adds attachment to existing message or creates a new one.

#+begin_src emacs-lisp
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                   (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))
(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src

** Matrix

*** Ement.el
:PROPERTIES:
:ID:       6c2b0d6c-c362-4a45-b69a-c71e015602c9
:END:

[[https://github.com/alphapapa/ement.el]]

#+begin_src emacs-lisp
;; Install `plz' HTTP library (not on MELPA yet).
(use-package plz
  :straight (plz :type git :host github :repo "alphapapa/plz.el"))

;; Install Ement.
(use-package ement
  :straight (ement :type git :host github :repo "alphapapa/ement.el")
  :custom
  (ement-room-prism 'both)
  (ement-save-session t))
#+end_src

* UI

** Diminish
:PROPERTIES:
:ID:       a4000fc6-bcf0-4651-8253-50e3ab04d579
:END:

#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'org-indent-mode))
#+end_src

** General
:PROPERTIES:
:ID:       20b847fc-991f-4607-9466-84453ddfd8ec
:END:

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(setq visible-bell t)
(line-number-mode -1)

(setq frame-resize-pixelwise t)
#+end_src

** Mode Line
:PROPERTIES:
:ID:       4408b47a-2e40-4150-98a5-42d31945cef0
:END:

#+begin_src emacs-lisp
(setq mode-line-compact 'long)

(setq-default header-line-format mode-line-format)
(setq-default mode-line-format nil)
#+end_src

** Margins
:PROPERTIES:
:ID:       71fd18d2-1a4d-4acb-861f-4cfa9f11b7d4
:END:

#+begin_src emacs-lisp
(defvar kk/margins-active t)
(defun kk/toggle-margins (&optional ARG)
  "Toggle margins when no `ARG' specified or set explicitly.
Activate margins if `ARG' is above 1 or disable when below."
  (interactive)
  (setq kk/margins-active (if ARG (if (< ARG 1) nil t) (not kk/margins-active)))
  (message (format "Margins are %s" (if kk/margins-active
                                        "active"
                                      "inactive"))))
(defun kk/set-margins-function ()
  (when (not (or (overlayp (current-buffer))
                 (popup-p (current-buffer))
                 (popper-popup-p (current-buffer))))
    (set-window-margins nil (if kk/margins-active 2 0)
                        (if kk/margins-active 2 0))))

(add-hook 'window-configuration-change-hook
          #'kk/set-margins-function)

(defun kk/display-line-numbers-mode (ARG)
  "Change line numbers mode and margins at the same time.
`ARG' beeing t enables line numbers and disables margins, nil disables line numbers and enables margins."
  (display-line-numbers-mode (if ARG 1 -1))
  (setq kk/margins-active (if ARG nil t))
  (kk/set-margins-function)
  (message "%s" ARG))

(defun kk/toggle-display-line-numbers-mode ()
  (interactive)
  (if display-line-numbers-mode
      (kk/display-line-numbers-mode nil)
    (kk/display-line-numbers-mode t)))
#+end_src

** Window Management

*** Winner Mode
:PROPERTIES:
:ID:       0f10d50f-ac83-4794-9f86-a2fc682faaa0
:END:

#+begin_src emacs-lisp
(winner-mode)
#+end_src

*** Popper
:PROPERTIES:
:ID:       0d5c66c1-a416-41cb-acb9-48901e1b0383
:END:

#+begin_src emacs-lisp
(use-package popper
  :bind (("C-ß"   . popper-toggle-latest)
         ("M-ß"   . popper-cycle)
         ("C-M-ß" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*helpful.*"
          help-mode
          compilation-mode
          dired-mode
          org-agenda-mode
          "^\\*.*eshell.*\\*$" eshell-mode
          "^\\*shell.*\\*$"  shell-mode
          "^\\*term.*\\*$"   term-mode
          "^\\*vc-git : .*\\*"
          "^\\*vc-diff\\*$"))
  (popper-mode +1))
#+end_src

*** Window Placement
:PROPERTIES:
:ID:       776c4d70-3876-4eca-8462-4d4284d91983
:END:

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*\\(Help\\|helpful.*\\)\\*"
               (display-buffer-reuse-window display-buffer-reuse-mode-window display-buffer-pop-up-window)
               (side . right)
               (split . 0)
               (window-width . 0.4)))
(add-to-list 'display-buffer-alist
             '("\\*\\(.*e?shell\\|vc-diff\\)\\*"
               (display-buffer-reuse-window display-buffer-reuse-mode-window display-buffer-pop-up-window)
               (side . right)
               (split . 1)
               (window-width . 0.4)))
#+end_src

** Bookmarks

*** Bookmark+
:PROPERTIES:
:ID:       c778dfd0-9d6f-4e3e-901a-c62ca7915fb0
:END:

#+begin_src emacs-lisp
(use-package bookmark+)
#+end_src

*** Burly
:PROPERTIES:
:ID:       2bab5c54-c1a8-4e8d-8e0e-8c5c155f704e
:END:

#+begin_src emacs-lisp
(use-package burly)
#+end_src

** Theme
:PROPERTIES:
:ID:       ffb701d8-a36e-4194-bd46-b8ae1777cdfe
:END:

*** Modus Themes
:PROPERTIES:
:ID:       320a5439-c545-49fe-81fa-755389c1e183
:END:

#+begin_src emacs-lisp
(use-package modus-themes
  :init
  (modus-themes-load-themes)
  :config
  (modus-themes-load-operandi)
  :bind
  ("<f5>" . modus-themes-toggle))
#+end_src

*** Theme Magic
:PROPERTIES:
:ID:       49d6ba95-4ca0-4840-a54e-db36bb0b9337
:END:

[[https://github.com/jcaw/theme-magic][Theme Magic]]. Apply your Emacs theme to the rest of Linux, using magic.

#+begin_src emacs-lisp
(use-package theme-magic
  :diminish theme-magic-export-theme-mode
  :config
  (theme-magic-export-theme-mode)
  (defun kk/reload-dwm-color-scheme ()
    (interactive)
    (start-process "reload dwm color scheme" nil "xdotool" "key" "Super_L+control+F5"))
  (advice-add 'theme-magic-from-emacs :after 'kk/reload-dwm-color-scheme))
#+end_src

** Columns And Line Numbers
:PROPERTIES:
:ID:       5f4d3123-a3a6-423a-aee0-752c1fe060a1
:END:

#+begin_src emacs-lisp
(setq display-line-numbers-type 'absolute)

(dolist (mode '(calendar-mode-hook
                ledger-report-mode-hook
                ledger-reconcile-mode-hook
                cfw:calendar-mode-hook
                image-mode-hook
                org-agenda-mode-hook
                doc-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Unicode Support
:PROPERTIES:
:ID:       293f1ee7-6737-4e9b-866b-11e59829e2bb
:END:

#+begin_src emacs-lisp
(use-package unicode-fonts)
(use-package all-the-icons)
#+end_src

** Helpful
:PROPERTIES:
:ID:       204dc542-3e93-4077-8a47-acc90f8510e8
:END:

#+begin_src emacs-lisp
(use-package helpful
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-function] . helpful-function))
#+end_src

** Font Configuration
:PROPERTIES:
:ID:       c83260d7-f416-4dbc-b0d1-6df254a74017
:END:

#+begin_src emacs-lisp
(defun kk/set-font-faces ()
  "Set font faces.
This function can be called to set the faces after making a frame,
in case Emacs daemon is used."
  (message "Settings faces!")
  (set-face-attribute 'default nil :height kk/default-font-size))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (kk/set-font-faces)
                  (kk/org-font-setup)
                  (unicode-fonts-setup))))
  (kk/set-font-faces)
  (kk/org-font-setup)
  (unicode-fonts-setup))
#+end_src

** Which Key
:PROPERTIES:
:ID:       b7c93b91-3d33-4889-8846-5e1637eae405
:END:

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 2))
#+end_src

** Hydra
:PROPERTIES:
:ID:       d2c4f6f8-0600-41e5-aed3-7a7b746dcc15
:END:

#+begin_src emacs-lisp
(use-package hydra
  :defer t)
#+end_src

*** Global
:PROPERTIES:
:ID:       c4be63eb-6f37-4490-aa00-b47dd43e70cb
:END:

#+begin_src emacs-lisp
(defhydra hydra-global (:hint nil)
  "
^Org                   ^Text
^^^^^^^^-----------------------------------------------------------------
_i_: punch in          _t_: tidy
_o_: punch out
"
  ("i" bh/punch-in :exit t)
  ("o" bh/punch-out :exit t)
  ("t" kk/tidy-buffer :exit t))
(global-set-key (kbd "C-c g") 'hydra-global/body)
#+end_src

*** Toggle Modes

#+begin_src emacs-lisp
(defhydra hydra-modes (:hint nil)
  "
_c_: column-numbers           _l_: line-numbers       _v_: visual-line-mode
_s_: subwords                 _b_: abbrev-mode        _f_: flyspell-mode
_a_: auto-save-visited-mode   _t_: typo-mode
"
  ("c" column-number-mode)
  ("l" kk/toggle-display-line-numbers-mode)
  ("s" subword-mode)
  ("f" flyspell-mode)
  ("a" auto-save-visited-mode)
  ("b" abbrev-mode)
  ("v" visual-line-mode)
  ("t" typo-mode)
  ("q" nil))
(global-set-key (kbd "C-c M") 'hydra-modes/body)
#+end_src

*** Development
:PROPERTIES:
:ID:       570b7e26-4d86-4323-8cc0-8f323d398962
:END:

#+begin_src emacs-lisp
(defhydra hydra-development (:hint nil)
  "
^Development^          ^LSP
^^^^^^^^-----------------------------------------------------------------
^ ^                    _l_: lsp
_c_: recompile         _L_: lsp-server
_C_: compile           _t_: tree
_s_: smartparens       _d_: dap
"
  ("c" recompile :exit t)
  ("C" compile :exit t)
  ("f" kk/tidy-buffer :exit t)
  ("l" hydra-lsp/body :exit t)
  ("L" lsp :exit t)
  ("t" treemacs :exit t)
  ("d" dap-hydra :exit t)
  ("s" hydra-smartparens/body :exit t))
(bind-key "C-c h" #'hydra-development/body prog-mode-map)
#+end_src

*** Mail
:PROPERTIES:
:ID:       29721939-f439-4637-921c-5216f18112d7
:END:

#+begin_src emacs-lisp
(defhydra hydra-mail (:hint nil)
  "
^Blocking^              ^Misc
^^^^^^^^-----------------------------------------------------------------
_r_: by regex           _d_: new mail dir
_f_: by sender          _c_: switch context
_s_: by subject         _h_: toggle html view
"
  ("r" kk/mail-block-by-regex :exit t)
  ("f" kk/mail-block-by-sender :exit t)
  ("s" kk/mail-block-by-subject :exit t)
  ("d" kk/mu4e-create-new-mail-folder :exit t)
  ("c" mu4e-context-switch)
  ("h" mu4e-view-toggle-html))

(defhydra hydra-mail-compose (:hint nil)
  "
^Add^                   ^Org
^^^^^^^^-----------------------------------------------------------------
_s_: signature          _e_: edit       _r_: revert to plain
_a_: attachment         _h_: htmlize
"
  ("s" kk/mu4e-choose-signature :exit t)
  ("a" mail-add-attachment :exit t)
  ("h" org-mime-htmlize :exit t)
  ("e" org-mime-edit-mail-in-org-mode :exit t)
  ("r" org-mime-revert-to-plain-text-mail :exit t))
#+end_src

*** Ediff
:PROPERTIES:
:ID:       859ce15a-8380-4882-ad0e-489b7f59b39a
:END:

#+begin_src emacs-lisp
(defhydra hydra-ediff (:color blue :hint nil)
  "
^Buffers^              ^Files^                ^VC^               ^Ediff regions
^^^^^^^^-----------------------------------------------------------------
_b_: buffers           _f_: files             _r_: revisions     _l_: linewise
_B_: buffers (3-way)   _F_: files (3-way)     ^ ^                _w_: wordwise
^ ^                    _c_: current file
"
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("=" ediff-files)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("r" ediff-revision)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise))
(global-set-key (kbd "C-c d") 'hydra-ediff/body)
#+end_src

*** Occur
:PROPERTIES:
:ID:       fe767c08-089c-42c1-941d-f5f62fdbf25d
:END:

#+begin_src emacs-lisp
;; Used in conjunction with occur-mode-goto-occurrence-advice this helps keep
;; focus on the *Occur* window and hides upon request in case needed later.
(defhydra hydra-occur-dwim (:hint nil)
  "
  ^Occur^             ^Navigation^     ^Visibility
  ^^^^^^^^-----------------------------------------------------------------
  _o_: occur-dwim     _j_: next        _h_: hide
  ^ ^                 _k_: prev        _r_: re-attach
  "
  ("o" occur-dwim "occur-dwim" :color red)
  ("j" occur-next "Next" :color red)
  ("k" occur-prev "Prev":color red)
  ("h" delete-window "Hide" :color blue)
  ("r" (reattach-occur) "Re-attach" :color red))

(global-set-key (kbd "M-s O") 'hydra-occur-dwim/body)
#+end_src

*** Org-Mode
:PROPERTIES:
:ID:       464def6e-db43-4135-9091-20c741768584
:END:
#+begin_src emacs-lisp
(defhydra hydra-org-mode (:hint nil)
  "
      ^Time                           ^Agenda
      ^^^^^^^^-----------------------------------------------------------------
      _p_: pomodoro                   _s_: search                _t_: tables
      _e_: extend clock to now        _S_: search todo only
      _i_: clock in                   _m_: match
      _o_: clock out                  _M_: match todo only       _w_: weekly review
      "
  ("p" org-pomodoro :exit t)
  ("e" org-pomodoro-extend-last-clock :exit t)
  ("i" org-clock-in :exit t)
  ("o" org-clock-out :exit t)
  ("s" org-search-view :exit t)
  ("S" (org-search-view t) :exit t)
  ("m" org-tags-view :exit t)
  ("M" (org-tags-view t) :exit t)
  ("t" kk/org-table-hydra/body :exit t)
  ("w" hydra-weekly-review/body :exit t))
(bind-key "C-c h" #'hydra-org-mode/body org-mode-map)

(defhydra org-agenda-hydra (:hint nil)
  "
Toggles
^^^^^^^^-----------------------------------------------------------------
_w_: include wait+sched.
_s_: super agenda mode
"
  ("w" bh/toggle-next-task-display)
  ("s" kk/org-super-agenda-mode-toggle)
  ("q" nil))

(bind-key "C-c h" #'org-agenda-hydra/body org-agenda-mode-map)

(defhydra kk/org-table-hydra (:hint nil)
  "
  ^Org Tables^                                                                      ^Formulas^
  ^^^^^^^^-----------------------------------------------------------------------------------------
  _p_: prev       _P_: move up      _h_: hline & next line    _F_, _B_: move cols   _a_: recalc all in buffer
  _n_: next       _N_: move down    _H_: insert hline below   _N_, _P_: move rows
  _f_: forward    _r_: insert row   _c_: insert column        _w_: toggle width
  _b_: back       _R_: kill row     _C_: kill column
  "
  ("n" next-line)
  ("p" previous-line)
  ("N" org-metadown)
  ("P" org-metaup)
  ("h" org-table-hline-and-move)
  ("H" org-table-insert-hline)
  ("f" org-cycle)
  ("TAB" org-cycle)
  ("b" org-shifttab)
  ("<backtab>" org-shifttab)
  ("r" org-table-insert-row)
  ("R" org-table-kill-row)
  ("F" org-table-move-column-right)
  ("B" org-table-move-column-left)
  ("c" org-table-insert-column)
  ("C" org-table-delete-column)
  ("u" undo)
  ("q" nil)
  ("w" org-table-toggle-column-width)
  ("a" org-table-recalculate-buffer-tables))

(defhydra kk/hydra-org-things (:hint nil)
  "
^Clocking^                   ^Timer^                  ^Contacts^      ^Query^          ^Other^
^^^^^^^^------------------------------------------------------------------------------------
_i_: punch in                _t_: set                 _c_: search     _S_: ql-search   _w_: weekly review
_o_: punch out               _T_: stop                _C_: send mail  _v_: view
_I_: clock in at time        _C-t_: pause or continue ^ ^
_O_: clock out at time
_d_: toggle clock in parent
"
  ("r" org-refile-goto-last-stored :exit t)
  ("i" bh/punch-in :exit t)
  ("o" bh/punch-out :exit t)
  ("d" kk/org-clock-in-parent-tasks-toggle)
  ("a" org-show-all :exit t)
  ("I" kk/clock-in-at-time)
  ("O" kk/clock-out-at-time)
  ("t" org-timer-set-timer :exit t)
  ("T" org-timer-stop :exit t)
  ("C-t" org-timer-pause-or-continue :exit t)
  ("h" bh/hide-other :exit t)
  ("c" org-contacts :exit t)
  ("C" org-contacts-view-send-email :exit t)
  ("v" org-ql-view :exit t)
  ("s" kk/org-search :exit t)
  ("S" org-ql-search :exit t)
  ("w" hydra-weekly-review/body :exit t)
  ("q" nil))
(global-set-key (kbd "<f9>") 'kk/hydra-org-things/body)
#+end_src

*** Straight
:PROPERTIES:
:ID:       eddaa5d6-1ffc-46a8-a756-04718b1ad00e
:END:

#+begin_src emacs-lisp
(defhydra hydra-straight-helper (:hint nil)
  "
      _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
      _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
      ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
      _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
      _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
  ("c" straight-check-all)
  ("C" straight-check-package)
  ("r" straight-rebuild-all)
  ("R" straight-rebuild-package)
  ("f" straight-fetch-all)
  ("F" straight-fetch-package)
  ("p" straight-pull-all)
  ("P" straight-pull-package)
  ("m" straight-merge-all)
  ("M" straight-merge-package)
  ("n" straight-normalize-all)
  ("N" straight-normalize-package)
  ("u" straight-push-all)
  ("U" straight-push-package)
  ("v" straight-freeze-versions)
  ("V" straight-thaw-versions)
  ("w" straight-watcher-start)
  ("W" straight-watcher-quit)
  ("g" straight-get-recipe)
  ("e" straight-prune-build)
  ("q" nil))
#+end_src

*** Anki
:PROPERTIES:
:ID:       a97c4628-d8a0-42c6-86ff-a9873dc9fe76
:END:

#+begin_src emacs-lisp
(defhydra hydra-anki-mode (:hint nil)
  "
      ^Anki
      ^^^^^^^^-----------------------------------------------------------------
      _i_: insert note         _s_: export subtree to html
      _c_: cloze region        _C_: convert region to html
      _p_: push notes
      "
  ("p" anki-editor-push-notes :exit t)
  ("i" anki-editor-insert-note :exit t)
  ("c" anki-editor-cloze-region :exit t)
  ("s" anki-editor-export-subtree-to-html :exit t)
  ("C" anki-editor-convert-region-to-html :exit t))
(add-hook 'anki-editor-mode-hook
          (lambda () (local-set-key (kbd "C-c h") #'hydra-anki-mode/body)))
#+end_src

*** Smartparens
:PROPERTIES:
:ID:       762d2501-002b-4bbc-8166-367e0432b782
:END:

#+begin_src emacs-lisp
(defhydra hydra-smartparens (:hint nil)
  "
      Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
      ------------------------------------------------------------------------------------------------------------------------
      [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
      [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
      [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
      [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit   [_TAB_] toggle smartparens mode"
  ;; Moving
  ("a" sp-beginning-of-sexp)
  ("e" sp-end-of-sexp)
  ("f" sp-forward-sexp)
  ("b" sp-backward-sexp)
  ("n" sp-down-sexp)
  ("N" sp-backward-down-sexp)
  ("p" sp-up-sexp)
  ("P" sp-backward-up-sexp)

  ;; Slurping & barfing
  ("h" sp-backward-slurp-sexp)
  ("H" sp-backward-barf-sexp)
  ("l" sp-forward-slurp-sexp)
  ("L" sp-forward-barf-sexp)

  ;; Wrapping
  ("R" sp-rewrap-sexp)
  ("u" sp-unwrap-sexp)
  ("U" sp-backward-unwrap-sexp)
  ("(" sp-wrap-round)
  ("{" sp-wrap-curly)
  ("[" sp-wrap-square)

  ;; Sexp juggling
  ("S" sp-split-sexp)
  ("s" sp-splice-sexp)
  ("r" sp-raise-sexp)
  ("j" sp-join-sexp)
  ("t" sp-transpose-sexp)
  ("A" sp-absorb-sexp)
  ("E" sp-emit-sexp)
  ("o" sp-convolute-sexp)

  ;; Destructive editing
  ("c" sp-change-inner :exit t)
  ("C" sp-change-enclosing :exit t)
  ("k" sp-kill-sexp)
  ("K" sp-backward-kill-sexp)
  ("w" sp-copy-sexp)

  ("TAB" smartparens-mode :exit t)
  ("q" nil)
  ("g" nil))
#+end_src

*** Emms
:PROPERTIES:
:ID:       90fa4518-1860-423d-928c-c22f9d2e186a
:END:

#+begin_src emacs-lisp
(defhydra emms-hydra (:hint nil)
  "
^Control^             ^^              ^Seek^           ^Sources^      Volume
^^^^^^^^-----------------------------------------------------------------
_s_: start            _n_: next       _>_: forward     _F_: file      _+_: raise
_h_: stop             _p_: prev       _<_: backward    _D_: Dir       _-_: lower
_c_: show current     _f_: shuffle    ^ ^              _T_: dir tree
_SPC_: toggle pause   _b_: playlist buffer^ ^          _q_: quit
"
  ("s" emms-start)
  ("h" emms-stop :exit t)
  ("n" emms-next)
  ("p" emms-previous)
  ("f" emms-shuffle)
  ("c" emms-show)
  ("F" emms-play-file)
  ("D" emms-play-directory)
  ("T" emms-play-directory-tree)
  (">" emms-seek-forward)
  ("<" emms-seek-backward)
  ("b" emms-playlist-mode-go :exit t)
  ("q" nil :exit t)
  ("SPC" emms-pause)
  ("+" emms-volume-raise)
  ("-" emms-volume-lower))
(global-set-key (kbd "C-c e") 'emms-hydra/body)
#+end_src

*** Weekly Review

#+begin_src emacs-lisp
(defhydra hydra-weekly-review (:hint nil)
  "
^Agenda^                 ^Mail^                   ^Toggle
^^^^^^^^-----------------------------------------------------------------
_d_: deadlines           _m_: mail                _t_: toggle personal/work
_s_: standalone          ^ ^                      _a_: review all
_h_: hold
_w_: weekly
_c_: clocking data
_r_: report
"
  ("m" kk/weekly-review-mail-inbox :exit t)
  ("t" kk/weekly-review-toggle-personal-work)
  ("a" kk/weekly-review-review-all)
  ("h" kk/weekly-review-hold :exit t)
  ("d" kk/weekly-review-deadlines :exit t)
  ("s" kk/weekly-review-standalone :exit t)
  ("w" kk/weekly-review-agenda :exit t)
  ("r" kk/weekly-review-clock-report :exit t)
  ("c" kk/weekly-review-clocking-data :exit t))
#+end_src

** Vertico
:PROPERTIES:
:ID:       792aa457-e36e-443d-9283-f4ba28b74e11
:END:

#+begin_src emacs-lisp
(use-package vertico
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode)
  :bind (:map minibuffer-local-map
              ("C-l" . kk/minibuffer-backward-kill))
  :config
  (defun kk/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a character backward.
This is a modified version of David Wilsons solution, which he in turn took from
https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608"
    (interactive "p")
    (when minibuffer-completing-file-name
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))))
  (setq completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Savehist
:PROPERTIES:
:ID:       d270446d-9c94-4495-9625-6879bbcf6988
:END:

#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

** Marginalia
:PROPERTIES:
:ID:       f3d3ed63-a67d-450d-8526-37fd1329c2cf
:END:

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))
#+end_src

** Orderless
:PROPERTIES:
:ID:       1d965767-0311-485a-803c-5391cacd8eea
:END:

#+begin_src emacs-lisp
(use-package orderless
  :after vertico
  :custom (completion-styles '(orderless))
  :config
  (setq completion-ignore-case t))
#+end_src

** Corfu
:PROPERTIES:
:ID:       828ed0a1-a8e7-4437-9c1e-8617aff4fbd1
:END:

#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
  (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
  ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
  ;; (corfu-echo-documentation nil) ;; Do not show documentation in the echo area

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  ;; :bind (:map corfu-map
  ;;        ("TAB" . corfu-next)
  ;;        ([tab] . corfu-next)
  ;;        ("S-TAB" . corfu-previous)
  ;;        ([backtab] . corfu-previous))

  ;; You may want to enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (corfu-global-mode))
#+end_src

** Embark
:PROPERTIES:
:ID:       6dc2d0f5-5e29-4066-a008-2e9a728a436b
:END:

#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)))
#+end_src

* Misc
:PROPERTIES:
:ID:       47749c3b-b6dd-4f7e-a698-89940e464b91
:END:

** Tidy Buffer
:PROPERTIES:
:ID:       9e07d209-3745-4c07-9c10-f1c02cffa3c0
:END:
#+begin_src emacs-lisp
(defun kk/tidy-buffer ()
  "Indent and tidy up the current buffer.
Delete trailing whitespace via `delete-trailing-whitespace', apply indentation via `indent-region', remove tabs via `untabify' and move point back to where we started."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace)))
#+end_src

** Calendar

*** General
:PROPERTIES:
:ID:       fab9eda7-3ed3-4322-9c70-8860fae16481
:END:

#+begin_src emacs-lisp
(setq calendar-location-name "Stuttgart")
(setq calendar-latitude 48.8)
(setq calendar-longitude 9.2)

(add-to-list 'display-buffer-alist
             '("\\*Calendar\\*"
               (display-buffer-in-side-window)
               (side . bottom)))
#+end_src

*** German

**** Weekday
:PROPERTIES:
:ID:       20b45f13-97ac-4ba5-bdf5-c179dbf45675
:END:

#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

**** Holidays
:PROPERTIES:
:ID:       510db8be-f33a-4d18-8b6e-8e9751b71f0b
:END:

This section is based on [[https://www.emacswiki.org/emacs/CalendarLocalization#h5o-32][this]] entry in the emacs wiki.

#+begin_src emacs-lisp
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-bahai-holidays nil)
(setq holiday-oriental-holidays nil)

(setq solar-n-hemi-seasons
      '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Neujahr")
        (holiday-fixed 5 1 "Tag der Arbeit")
        (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

;; Feiertage für Baden-Württemberg, weitere auskommentiert
(setq holiday-christian-holidays
      '((holiday-float 12 0 -4 "1. Advent" 24)
        (holiday-float 12 0 -3 "2. Advent" 24)
        (holiday-float 12 0 -2 "3. Advent" 24)
        (holiday-float 12 0 -1 "4. Advent" 24)
        (holiday-fixed 12 25 "1. Weihnachtstag")
        (holiday-fixed 12 26 "2. Weihnachtstag")
        (holiday-fixed 1 6 "Heilige Drei Könige")
        ;; (holiday-easter-etc -48 "Rosenmontag")
        ;; (holiday-easter-etc -3 "Gründonnerstag")
        (holiday-easter-etc  -2 "Karfreitag")
        (holiday-easter-etc   0 "Ostersonntag")
        (holiday-easter-etc  +1 "Ostermontag")
        (holiday-easter-etc +39 "Christi Himmelfahrt")
        (holiday-easter-etc +49 "Pfingstsonntag")
        (holiday-easter-etc +50 "Pfingstmontag")
        (holiday-easter-etc +60 "Fronleichnam")
        ;; (holiday-fixed 8 15 "Mariae Himmelfahrt")
        (holiday-fixed 11 1 "Allerheiligen")
        ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
        (holiday-float 11 0 1 "Totensonntag" 20)))
#+end_src

*** Keybinding
:PROPERTIES:
:ID:       9ad991c8-4388-4ff3-9026-a554f5481f77
:END:

#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'calendar)
#+end_src

*** Week Numbers
:PROPERTIES:
:ID:       fcfe3b39-2e53-4b05-ab09-38678127a5f2
:END:

[[https://www.emacswiki.org/emacs/CalendarWeekNumbers][Snippet taken from here]].

#+begin_src emacs-lisp
(copy-face font-lock-constant-face 'calendar-iso-week-face)
(set-face-attribute 'calendar-iso-week-face nil
                    :height 1.0 :foreground "salmon")
(setq calendar-intermonth-text
      '(propertize
        (format "%2d"
                (car
                 (calendar-iso-from-absolute
                  (calendar-absolute-from-gregorian (list month day year)))))
        'font-lock-face 'calendar-iso-week-face))

(copy-face 'default 'calendar-iso-week-header-face)
(set-face-attribute 'calendar-iso-week-header-face nil
                    :height 1.0 :foreground "salmon")
(setq calendar-intermonth-header
      (propertize "KW"                  ; or e.g. "KW" in Germany
                  'font-lock-face 'calendar-iso-week-header-face))
#+end_src

*** Calfw
:PROPERTIES:
:ID:       2ca3ee75-26ee-4ea0-be0c-f43729a54fea
:END:

#+begin_src emacs-lisp
(use-package calfw
  :config

  (use-package calfw-org
    :config
    (setq cfw:org-overwrite-default-keybinding t)
    (setq cfw:org-agenda-schedule-args '(:timestamp :deadline)))

  (global-set-key (kbd "C-c C") 'cfw:open-org-calendar)

  (defun kk/open-calendar ()
    "Open calendar calfw with additional sources."
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "Green"))))

  (defun kk/cfw:org-open-agenda-day (original)
    "Call cfw:org-open-agenda-day with org-agenda-sticky set to nil."
    (let ((org-agenda-sticky nil))
      (funcall original)))

  (advice-add 'cfw:org-open-agenda-day :around 'kk/cfw:org-open-agenda-day)

  (setq cfw:org-capture-template '("Q" "calfw2org" entry (file kk/org-refile-target) "* %? %(cfw:org-capture-day)")))
#+end_src

** Calculating
:PROPERTIES:
:ID:       a3778e3c-c048-42b4-9fdd-9297700cbc8a
:END:

Modified version of [[https://www.emacswiki.org/emacs/Calc][this]].

#+begin_src emacs-lisp
(defun kk/calc-eval-region (arg beg end)
  "Calculate the region and display the result in the echo area.
With prefix ARG non-nil, insert the result at the end of region."
  (interactive "P\nr")
  (let* ((expr (s-chop-suffix "=" (s-trim (buffer-substring-no-properties beg end))))
         (result (calc-eval expr)))
    (if (null arg)
        (message "%s = %s" expr result)
      (goto-char end)
      (save-excursion
        (insert result)))))

(define-key edit-commands-map (kbd "q") 'kk/calc-eval-region)
#+end_src

** Web

*** Eww
:PROPERTIES:
:ID:       2c375c8d-6c40-40d0-a623-f264292e7467
:END:

#+begin_src emacs-lisp
(use-package eww
  :config (setq browse-url-browser-function 'eww
                shr-width 80))
#+end_src

*** Search Logic
:PROPERTIES:
:ID:       5e5846c9-ca66-4500-9276-b69bb8191bc2
:END:

#+begin_src emacs-lisp
(defun kk/pick-search-engine ()
  (interactive)
  (cdr (assoc (completing-read "Engine: " kk/search-engines nil t) kk/search-engines)))

(defun kk/search-web-via-search-engine (search-string)
  (interactive "sSearch for: ")
  (eww (concat (kk/pick-search-engine) search-string)))

(defun kk/search-web-via-search-engine-dwim ()
  (interactive)
  (if (use-region-p)
      (let ((region-string (buffer-substring (region-beginning) (region-end))))
        (if (not (string-match-p "\\`[ \n\t\r\v\f]*\\'" region-string))
            (kk/search-web-via-search-engine region-string)
          (call-interactively 'kk/search-web-via-search-engine)))
    (call-interactively 'kk/search-web-via-search-engine)))

(global-set-key (kbd "M-s M-w") 'kk/search-web-via-search-engine-dwim)
#+end_src

*** Search Engines
:PROPERTIES:
:ID:       e62c6bc0-d0e2-4eca-8ab2-261446c419ea
:END:

#+begin_src emacs-lisp
(setq kk/search-engines '(("amazon.de" . "https://www.amazon.de/s?k=")
                          ("arch aur" . "https://aur.archlinux.org/packages/?&K=")
                          ("archwiki" . "https://wiki.archlinux.org/index.php?search=")
                          ("check ssl for (sub)domain" . "https://www.ssllabs.com/ssltest/analyze.html?d=")
                          ("dhl sendungsverfolgung" . "https://mailing.dhl.de/go/8/4A36IYXV-2DENCMYS-2PTLXTFO-CHW19XT.html?piececode=")
                          ("dict.cc" . "https://www.dict.cc/?s=")
                          ("dns check" . "https://intodns.com/")
                          ("dpd sendungsverfolgung" . "https://tracking.dpd.de/parcelstatus?query=")
                          ("duckduckgo searchengine" . "https://html.duckduckgo.com/html?q=")
                          ("duden.de" . "https://www.duden.de/suchen/dudenonline/")
                          ("ebay.de" . "https://www.ebay.de/sch/i.html?&_nkw=")
                          ("english oxford dictionary" . "https://www.oxfordlearnersdictionaries.com/spellcheck/english/?q=")
                          ("gemini searchengine gus.guru" . "gemini://gus.guru/search?")
                          ("github" . "https://github.com/search?q=")
                          ("gls sendungsverfolgung" . "https://www.gls-pakete.de/en/parcel-tracking#?trackingNumber=")
                          ("google" . "https://www.google.de/search?q=")
                          ("hermes sendungsverfolgung" . "https://www.myhermes.de/empfangen/sendungsverfolgung/sendungsinformation/#")
                          ("imdb" . "https://www.imdb.com/find?q=")
                          ("microsoft docs" . "https://support.microsoft.com/en-us/Search/results?query=")
                          ("mydealz" . "https://www.mydealz.de/search?q=")
                          ("openstreetmap karte" . "https://www.openstreetmap.org/search?query=")
                          ("ps wiki wiki.kloess.xyz" . "https://wiki.kloess.xyz/doku.php?do=search&q=")
                          ("reddit.com" . "https://html.duckduckgo.com/html?q=site:reddit.com+")
                          ("searx" . "https://searx.pofilo.fr/?q=")
                          ("thefreedictionary" . "https://www.thefreedictionary.com/")
                          ("thepiratebay" . "https://thepiratebay.org/search.php?q=")
                          ("vollebak" . "https://www.vollebak.com/?s=")
                          ("w3schools.com" . "https://html.duckduckgo.com/html?q=site:w3schools.com+")
                          ("wikipedia" . "https://de.wikipedia.org/wiki/")
                          ("wolframalpha" . "https://www.wolframalpha.com/?i=")
                          ("youtube" . "https://html.duckduckgo.com/html?q=site:youtube.com+")
                          ("emacs wiki" . "https://html.duckduckgo.com/html?q=site:emacswiki.org+")))
#+end_src

** Searching (In) Files
:PROPERTIES:
:ID:       70585f37-0e72-495e-9612-1d242900c684
:END:

#+begin_src emacs-lisp
(global-set-key (kbd "M-s i") 'rgrep) ;; search the *I*nside of files with grep recursively

(global-set-key (kbd "M-s d") 'find-name-dired) ;; search the *D*irectories for filenames recursively
#+end_src

** Ledger Mode
:PROPERTIES:
:ID:       ca7bc576-ea1e-4c85-93d0-8d723f60d99e
:END:

#+begin_src emacs-lisp
(use-package ledger-mode
  :custom
  (ledger-reconcile-default-commodity "€")
  (ledger-clear-whole-transactions t))
#+end_src

** Flyspell
:PROPERTIES:
:ID:       f80a76f0-45a3-4234-94e1-c952e4fb7f55
:END:

#+begin_src emacs-lisp
(use-package flyspell
  :straight nil
  :config
  (setq flyspell-default-dictionary "german")
  (define-key flyspell-mode-map (kbd "C-M-i") 'completion-at-point))
#+end_src

** Abbrev Mode
:PROPERTIES:
:ID:       2638221e-8533-4dc5-bcb1-d3166d0645cc
:END:

#+begin_src emacs-lisp
(setq-default abbrev-mode t)
#+end_src

** Lively
:PROPERTIES:
:ID:       60315a45-4edf-40c2-ac2d-5447e199dbdc
:END:

Make code be replaced by its formatted result -- and periodically updated.

#+begin_src emacs-lisp
(use-package lively
  :config
  (setq lively-interval 0.5))
#+end_src

** Sudo Edit
:PROPERTIES:
:ID:       41788b8b-8a6f-4db9-8330-daf138b01523
:END:

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Media

*** EMMS
:PROPERTIES:
:ID:       1bd9c937-52a1-4619-b373-2fee5c2784cc
:END:

#+begin_src emacs-lisp
(use-package emms
  :config
  (require 'emms-setup)
  (emms-standard)
  (emms-default-players)
  (setq emms-source-file-default-directory kk/emms-source-file-default-directory))
#+end_src

*** Mpv
:PROPERTIES:
:ID:       27bb2d68-58ac-493b-a89f-b687164de4a0
:END:

#+begin_src emacs-lisp
(use-package mpv)
#+end_src

*** Ytel
:PROPERTIES:
:ID:       a5ad1506-a35d-4059-976b-6f44ef557cd5
:END:

#+begin_src emacs-lisp
(use-package ytel
  :config
  (setq ytel-invidious-api-url "https://invidious.namazso.eu")
  (defun ytel-yt-url ()
    "Return URL of video at point."
    (interactive)
    (let* ((video (ytel-get-current-video))
           (id    (ytel-video-id video)))
      (concat "https://www.youtube.com/watch?v=" id)))

  (defun ytel-watch ()
    "Stream video at point in mpv."
    (interactive)
    (start-process "ytel mpv" nil
                   "mpv"
                   (ytel-yt-url)
                   "--ytdl-format=bestvideo[height<=?720]+bestaudio/best")
    (message "Starting streaming..."))
  (define-key ytel-mode-map "y" #'ytel-watch)

  (defun ytel-yank-url ()
    (interactive)
    (let ((url (ytel-yt-url)))
      (kill-new url)
      (message "%s pushed to killring." url)))
  (define-key ytel-mode-map "w" #'ytel-yank-url)

  (defun ytel-browse-librewolf ()
    (interactive)
    (let ((url (ytel-yt-url)))
      (start-process "ytel-librewolf"
                     nil
                     "librewolf"
                     url)
      (message "Video opened in librewolf.")))
  (define-key ytel-mode-map "b" #'ytel-browse-librewolf))
#+end_src

** s.el
:PROPERTIES:
:ID:       8f95969f-9611-4369-9ea0-df783eae0af6
:END:

#+begin_src emacs-lisp
(use-package s)
#+end_src

** Elfeed
:PROPERTIES:
:ID:       17af1efe-f9a0-4213-a951-3709121c4893
:END:

#+begin_src emacs-lisp
(use-package elfeed
  :defer 0
  :config
  (require 'elfeed-feeds)
  (global-set-key (kbd "C-c r") 'elfeed))
#+end_src

** Pdf-Tools
:PROPERTIES:
:ID:       30c52271-1215-4b4f-801e-038447cf0485
:END:

#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-loader-install))
#+end_src

** Open In Vim
:PROPERTIES:
:ID:       ac02879d-a33a-4a61-9b5d-eb525c52b97f
:END:

#+begin_src emacs-lisp
(defun kk/open-in-vim ()
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if file-name
        (if (file-exists-p file-name)
            (async-shell-command (format "setsid -f $TERMINAL -e vim +%s %s" (line-number-at-pos) file-name))
          (message (format "The file %s does not exist." file-name)))
      (message "Sum Thing Wong."))))
#+end_src

** Daily Standups
:PROPERTIES:
:ID:       8c524231-b270-4c5c-9e8e-3bf0fe309c2c
:END:

#+begin_src emacs-lisp
(defun kk/daily-standup ()
  "Set up everything for the daily standup.
Opens the notes file for dailies, starts capturing the meeting and
opens the meeting URL.

Needs the meeting url to be saved in `~/.local/share/data/standupurl'."
  (interactive)
  (find-file "~/nextcloud_work/Documents/standups.org")
  (kk/daily-standup-capture)
  (eww-browse-with-external-browser (org-file-contents "~/.local/share/data/standupurl")))

(defun kk/daily-standup-capture ()
  "Starts capturing a daily standup meeting."
  (interactive)
  (org-capture nil "m")
  (insert "dx Daily Standup")
  (org-clock-in)
  (next-line 7)
  (end-of-line))
#+end_src

** Typo Mode
:PROPERTIES:
:ID:       d92c496e-89f0-4759-a60d-4445693ec323
:END:

#+begin_src emacs-lisp
(use-package typo
  :config
  (setq-default typo-language "German"))
#+end_src

** Proced
:PROPERTIES:
:ID:       ac70bc14-5ce8-45a0-9def-363baa653c9a
:END:

#+begin_src emacs-lisp
(use-package proced
  :custom
  (proced-auto-update-flag t))
#+end_src

** 0x0.st

#+begin_src emacs-lisp
(use-package 0x0
  :config
  (with-eval-after-load 'embark
    (define-key embark-region-map (kbd "U") '0x0-upload-text)
    (define-key embark-file-map (kbd "U") '0x0-upload-file)))
#+end_src

* Terminals And Shells

** Settings

*** Pager
:PROPERTIES:
:ID:       81b26c54-6cf0-4d23-a8af-cfc5456b0467
:END:

#+begin_src emacs-lisp
(setenv "PAGER" "cat")
#+end_src

*** Fish Completion
:PROPERTIES:
:ID:       a4a251b7-cc17-4b56-9460-b2fbc429e956
:END:

#+begin_src emacs-lisp
(use-package fish-completion
  :config
  (when (and (executable-find "fish")
             (require 'fish-completion nil t))
    (global-fish-completion-mode)))
#+end_src

** Term-Mode
:PROPERTIES:
:ID:       9345b651-2156-4bfa-8082-6462c99900fb
:END:

#+begin_src emacs-lisp
(use-package term
  :hook
  (term-mode . (lambda ()
                 (display-line-numbers-mode 0)))
  :config
  (setq explicit-shell-file-name "bash")
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

** Shell-Mode
:PROPERTIES:
:ID:       2d34a5ca-e352-4814-b9b3-264381049d20
:END:

#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)
  (setq explicit-shell-file-name "powershell.exe")
  (setq explicit-powershell.exe-args '()))

;; without this line tramp does not seem to work.
(setq shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
#+end_src

** Eshell
:PROPERTIES:
:ID:       ab4fd50b-ee54-4b3a-a103-d5c1a17cc299
:END:

#+begin_src emacs-lisp
(defun kk/eshell-configure ()
  (mapcar (lambda (x)
            (add-to-list 'eshell-visual-commands x))
          '("vim")))

(use-package eshell
  :hook (eshell-first-time-mode . kk/eshell-configure)
  :config
  (global-set-key (kbd "C-c C-<return>") 'eshell))
#+end_src

* Disabled Commands
:PROPERTIES:
:ID:       4d356102-360e-44b4-ae92-01ef453a6997
:END:

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+end_src

* Keyboard Macros
:PROPERTIES:
:ID:       bd676a93-d7f4-4fd6-9e3d-eca0e24dad28
:END:

#+begin_src emacs-lisp
(fset 'kk/buffer-quote-access-vba-sql-statement
      (kmacro-lambda-form [?\M-x ?s ?q ?l ?f ?o ?r ?m ?a ?t return ?\C-  ?\M-< ?\C-  ?\M-> ?\C-u ?- ?2 ?0 ?0 ?\C-x tab ?\M-< ?\C-s ?f ?r ?o ?m return ?\C-a ?\C-  ?\M-> ?\M-q ?\M-< ?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?r ?e ?g ?e ?r backspace ?y ?p backspace backspace ?x ?p return ?^ return ?\" return ?\M-< ?\M-x ?\M-p return ?$ return ?  ?\" ?  ?& ?  ?_ return] 0 "%d"))
(fset 'kk/buffer-remove-quotes-access-vba-sql-statement
      (kmacro-lambda-form [?\M-< ?\C-  ?\M-> ?\C-u ?- ?2 ?0 ?0 ?\C-x tab ?\M-< ?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?r ?e ?g ?e ?x ?p ?\C-m ?^ ?\" ?\C-m ?\C-m ?\M-< ?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?r ?e ?g ?e ?x ?p ?\C-m ?\" ?. ?* ?$ ?\C-m ?\C-m] 0 "%d"))
#+end_src

* Runtime Performance
:PROPERTIES:
:ID:       b1f0f902-230b-4db1-9b12-571e84c57cb4
:END:

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
