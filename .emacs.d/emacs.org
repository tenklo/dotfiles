#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* System Specific Settings

Here variables shall be set, which will be used through the config to set system specific values.

#+begin_src emacs-lisp

  (pcase system-name
    ("dwhpd"
     (setq kk/default-font-size 140)
     (setq kk/org-agenda-files (list
                                "~/nextcloud_work/digital-worx/Porsche/Schraubtechnikdatenbank/notizen/porsche.org"
                                "~/nextcloud_work/Documents/standups.org"
                                "~/nextcloud_work/Documents/workAgenda.org")))
    ("T490s"
     (setq kk/default-font-size 180)
     (setq kk/org-agenda-files (list
                                "~/nextcloud_work/digital-worx/Porsche/Schraubtechnikdatenbank/notizen/porsche.org"
                                "~/nextcloud_work/Documents/standups.org"
                                "~/nextcloud_work/Documents/workAgenda.org"
                                "~/tasks.org")))
    (_
     (setq kk/default-font-size 150)
     (setq kk/org-agenda-files '(""))))


#+end_src

* About
This file generates init.el which can be loaded by Emacs at startup.

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun kk/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'kk/display-startup-time)

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn’t make it easy to automatically install packages on a new system the first time you pull down your configuration. use-package is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

Installation problems seem to often get fixed by executing =package-refresh-contents=.

#+begin_src emacs-lisp

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;;initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* UI Configuration
** General

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  (dolist (mode '(treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Themes

#+begin_src emacs-lisp

  (use-package doom-themes)
  (load-theme 'doom-dracula t)

#+end_src

** Font Configuration

#+begin_src emacs-lisp

  (defun kk/set-font-faces ()
    (message "Settings faces!")
    (set-face-attribute 'default nil :font kk/default-font :height kk/default-font-size))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame (kk/set-font-faces))))
    (kk/set-font-faces))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.
[[https://github.com/seagle0128/doom-modeline#customize][Configuration options]]

#+begin_src emacs-lisp

  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly :
  ;;
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-hight 10))

#+end_src

** Which Key
#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

#+end_src
** Ivy and Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("M-s s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x r b" . counsel-bookmark)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ; don't start searches with ^

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src
** Helpful Package

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-descrive-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src
** Recent Files

#+begin_src emacs-lisp

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-c\ \C-r" 'recentf-open-files)

#+end_src
** Calendar

#+begin_src emacs-lisp
  (use-package calendar
    :config
    (setq calendar-week-start-day 1))
#+end_src

* Org Mode
** Basic
#+begin_src emacs-lisp

  (defun kk/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (setq-local display-line-numbers-type t))

  (defun kk/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))

  (use-package org
    :hook (org-mode . kk/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files kk/org-agenda-files)
    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil)))
    (kk/org-font-setup))

  (use-package org-bullets
    :after org
    :hook
    (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("W" "Work Tasks" tags-todo "+work-email")

          ;; Low-effort next actions
          ("e" tags-todo "+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))


  (advice-add 'org-refile :after 'org-save-all-org-buffers)


  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)")))

#+end_src
** Babel

Don't prompt eval confirmation
#+begin_src emacs-lisp

  (setq org-confirm-babel-evaluate nil)

#+end_src

*** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  (defun kk/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'kk/org-babel-tangle-config)))

#+end_src
*** Configure Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'arg-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Package for TOC

#+begin_src emacs-lisp

  (use-package toc-org
    :hook (org-mode-hook . toc-org-mode))

#+end_src
** Diary

#+begin_src emacs-lisp
  (setq diary-file "~/nextcloud_work/Documents/diary")
#+end_src

** Skeletons

#+begin_src emacs-lisp

  (define-skeleton kk/test-skeleton
    "This is some test skeleton" nil
    "#+TITLE: Some test Title\n"
    "#+AUTHOR: Karsten Klöss\n")

#+end_src

* Development
** Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Languages
*** IDE Features with lsp-mode

[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode (homepage)]] and the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][languages part]] of said homepage.

To use lsp-mode for any language, check the above places first.
You'll likely need to install a corresponding mode and language server outside on your system.

**** lsp-mode

See [[https://github.com/emacs-lsp/lsp-mode/][lsp-mode (Github)]]

Installation of lsp-mode likes to fail because were not able to install the "spinner" package. Running ~M-x package-refresh-contents~ seems to fix this. Maybe not.

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

***** Header Breadcrumb

#+begin_src emacs-lisp
  (defun kk/lsp-mode-setup()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))

    :hook (lsp-mode . kk/lsp-mode-setup))
#+end_src

***** lsp-ui

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

***** treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp-mode
    :commands treemacs)

  (global-set-key (kbd "C-c t") 'lsp-treemacs-symbols)


#+end_src

*** TypeScript

Execute ~npm i -g typescript-language-server; npm i -g typescript~ first to install the language server

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*** PHP

#+begin_src emacs-lisp

  (use-package php-mode
    :mode "\\.php\\'"
    :hook (php-mode . lsp-deferred))

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :hook (python-mode . lsp-deferred)
    :custom
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    ;; Customize which windows to display with
    ;; (dap-auto-configure-features '(sessions locals tooltip))
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger")))

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :defer 0
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status)
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Parenthesis
*** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

*** show-paren-mode

#+begin_src emacs-lisp

  (show-paren-mode 1)

#+end_src

** Flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :defer t
    :config
    (global-flycheck-mode))

#+end_src

** indent-guide

#+begin_src emacs-lisp

  (use-package indent-guide
    :hook (prog-mode . indent-guide-mode))

#+end_src

** format-all

#+begin_src emacs-lisp

  (use-package format-all)

#+end_src

* Tramp

#+begin_src emacs-lisp

  (setq tramp-default-method "ssh")

#+end_src

* Writing
** Word Completion

#+begin_src emacs-lisp

  (defun kk/text-mode-completion-setup ()
    (interactive)
    (require 'company)
    (add-to-list 'company-backends 'company-ispell))

  (add-hook 'text-mode-hook 'kk/text-mode-completion-setup)

#+end_src

** Spellcheck

#+begin_src emacs-lisp

  ;; (add-hook 'text-mode-hook 'flyspell-mode)

#+end_src

#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

#+end_src

** guess-language

#+begin_src emacs-lisp

  (use-package guess-language         ; Automatically detect language for Flyspell
    :ensure t
    :defer t
    :init (add-hook 'ispell-minor-mode-hook #'guess-language-mode)
    :config
    (setq guess-language-langcodes '((de . ("de_DE" "German"))
                                     (en . ("en_US" "English")))
          guess-language-languages '(de en)
          guess-language-min-paragraph-length 40)
    :diminish guess-language-mode)

#+end_src

* Keybindings
** Evil Mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

*** Special Evil Modemap

#+begin_src emacs-lisp

  (defvar kk/intercept-mode-map (make-sparse-keymap)
    "High precedence keymap.")

  (define-minor-mode kk/intercept-mode
    "Global minor mode for higher precedence evil keybindings."
    :global t)

  (kk/intercept-mode)

  (dolist (state '(normal visual insert))
    (evil-make-intercept-map
     ;; NOTE: This requires an evil version from 2018-03-20 or later
     (evil-get-auxiliary-keymap kk/intercept-mode-map state t t)
     state))

  (evil-define-key 'normal kk/intercept-mode-map
    (kbd "SPC f") 'find-file
    (kbd "g j") 'evil-next-visual-line
    (kbd "g k") 'evil-previous-visual-line)

#+end_src

** Undo System

[[https://github.com/emacsmirror/undo-fu][undo-fu]]

#+begin_src emacs-lisp

  (use-package undo-fu
    :init)

  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
  (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)

#+end_src

** General Leader Keys

Defining leader keys using the general package.

#+begin_src emacs-lisp

  (use-package general
    :after evil
    :config
    (general-create-definer kk/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (kk/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ts" '(hydra-text-scale/body :which-key "scale-text")
      "b" '(hydra-buffer-control/body :which-key "control buffers")
      "j" '(hydra-bookmark-control/body :which-key "control bookmarks")
      "w" '(hydra-window-size/body :which-key "change window size")))

#+end_src
** General Global Bindings

#+begin_src emacs-lisp

  ;;Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  (global-set-key (kbd "C-c a") 'org-agenda)

  (global-set-key (kbd "C-c g") 'magit-status)

  (global-set-key (kbd "C-c m") 'mu4e)

  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)

  (global-set-key (kbd "C-c <return>") 'eshell)

  (global-set-key (kbd "C-c C-<return>") 'term)

  (global-set-key (kbd "C-M-j") 'ibuffer)

  (global-set-key (kbd "C-c c") 'kk/open-calendar)

#+end_src

** Search
#+begin_src emacs-lisp

  (global-set-key (kbd "M-s i") 'rgrep) ;; search the *I*nside of files with grep recursively

  (global-set-key (kbd "M-s d") 'find-name-dired) ;; search the *D*irectories for filenames recursively

#+end_src

** Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (defhydra hydra-buffer-control (:timeout 4)
    "change buffers"
    ("l" counsel-switch-buffer "list" :exit t)
    ("c" kill-current-buffer "kill current" :exit t)
    ("k" previous-buffer "previous")
    ("j" switch-to-next-buffer "next")
    ("f" nil "finished" :exit t))


  (defhydra hydra-bookmark-control (:timeout 5)
    "set and load bookmarks"
    ("s" bookmark-set "set")
    ("l" bookmark-bmenu-list "list")
    ("f" nil "finished" :exit t))

  (defhydra hydra-window-size (:timeout 5)
    "change window sizes"
    ("u" balance-windows "balance")
    ("j" evil-window-decrease-height "decrease height")
    ("k" evil-window-increase-height "increase height")
    ("h" evil-window-decrease-width "decrease width")
    ("l" evil-window-increase-width "increase width")
    ("f" make-frame "make frame"))

#+end_src

* Terminals
** term-mode

=term-mode= is a built-in terminal emulator in Emacs. Because it is written in Emacs Lisp, you can start using it immediately with very little configuration. If you are on Linux or macOS, term-mode is a great choice to get started because it supports fairly complex terminal applications (htop, vim, etc) and works pretty reliably. However, because it is written in Emacs Lisp, it can be slower than other options like vterm. The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is line-mode versus char-mode. line-mode enables you to use normal Emacs keybindings while moving around in the terminal buffer while char-mode sends most of your keypresses to the underlying terminal. While using term-mode, you will want to be in char-mode for any terminal applications that have their own keybindings. If you’re just in your usual shell, line-mode is sufficient and feels more integrated with Emacs.

With evil-collection installed, you will automatically switch to char-mode when you enter Evil’s insert mode (press i). You will automatically be switched back to line-mode when you enter Evil’s normal mode (press ESC).

Run a terminal with M-x term!

Useful key bindings:

- C-c C-p / C-c C-n - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- C-c C-k - Enter char-mode
- C-c C-j - Return to line-mode

If you have evil-collection installed, term-mode will enter char mode when you use Evil’s Insert mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

  (setq shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun kk/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . kk/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'default))

#+end_src

* File Management
** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-Alh --group-directories-first"))
    :hook (dired-mode . dired-hide-details-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer
      "L" 'dired-open-xdg))

  (use-package dired-single
    :after dired)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :after dired
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "sxiv")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Managing Email with mu4e

** Signatures

#+begin_src emacs-lisp

  (defun kk/mu4e-choose-signature ()
    "Insert one of a number of sigs"
    (interactive)
    (let ((message-signature
           (mu4e-read-option "Signature:"
                             '(("work" .
                                (concat
                                 "-------------------------------------\n"
                                 "digital worx GmbH\n"
                                 "Schulze-Delitzsch-Str. 16\n"
                                 "70565 Stuttgart\n"
                                 "\n"
                                 "Tel. 0711 220 40 93 0\n"
                                 "Fax. 0711 220 40 93 44\n"
                                 "\n"
                                 "kloess@digital-worx.de\n"
                                 "\n"
                                 "http://www.digital-worx.de\n"
                                 "-------------------------------------\n"
                                 "Geschaeftsfuehrer:\n"
                                 "Sven Rahlfs\n"
                                 "Mirko Ross\n"
                                 "\n"
                                 "HRB 22 5281 Amtsgericht Stuttgart\n"
                                 "USt.-Id. Nr.: DE218401190\n"
                                 "-------------------------------------"))))))
      (message-insert-signature)))

#+end_src

** General

#+begin_src emacs-lisp

  (defun kk/mu4e-add-standard-bookmarks ()
    (interactive)
    (add-to-list 'mu4e-bookmarks '(:query "m:/kloess@digital-worx.de/Inbox or m:/karsten.kloess@its-stuttgart.de/Inbox" :name "All Inboxes" :key ?y :hide t) t)
    (add-to-list 'mu4e-bookmarks '(:query "flag:unread" :name "All Unread" :key ?x :hide t) t))

  (add-hook 'mu4e-context-changed-hook 'kk/mu4e-add-standard-bookmarks)

  (use-package mu4e
    :defer 0
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :custom
    (mu4e-confirm-quit)
    :config
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-context-policy 'always-ask)

    ;; Display options
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses 't)
    (setq mu4e-headers-include-related nil)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 5 minutes
    (setq mu4e-update-interval (* 5 60))
    (setq mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/mbsyncrc")
    (setq mu4e-maildir "~/.local/share/mail")

    ;; Configure the function to use for sending mail
    (setq sendmail-program "/usr/bin/msmtp"
          message-sendmail-f-is-evil t
          message-sendmail-extra-arguments '("--read-envelope-from")
          send-mail-function 'smtpmail-send-it
          message-send-mail-function 'message-send-mail-with-sendmail)

    (add-hook 'mu4e-compose-mode-hook (lambda () (local-set-key (kbd "C-c C-w" #'kk/mu4e-choose-signature))))

    (setq mu4e-contexts
          (list
           ;; digital-worx
           (make-mu4e-context
            :name "dx"
            :enter-func (lambda ()
                          (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                            (revert-buffer)))
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/kloess@digital-worx.de" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "kloess@digital-worx.de")
                    (user-full-name    . "Karsten Klöss")
                    (mu4e-drafts-folder  . "/kloess@digital-worx.de/Drafts")
                    (mu4e-sent-folder  . "/kloess@digital-worx.de/Sent")
                    (mu4e-refile-folder  . "/kloess@digital-worx.de/Archives")
                    (mu4e-trash-folder  . "/kloess@digital-worx.de/Trash")
                    (mu4e-maildir-shortcuts .
                                            ((:maildir "/kloess@digital-worx.de/INBOX" :key ?i)
                                             (:maildir "/kloess@digital-worx.de/Archives" :key ?a)
                                             (:maildir "/kloess@digital-worx.de/Trash" :key ?t)
                                             (:maildir "/kloess@digital-worx.de/Drafts" :key ?d)
                                             (:maildir "/kloess@digital-worx.de/Junk" :key ?j)
                                             (:maildir "/kloess@digital-worx.de/digital worx" :key ?x)
                                             (:maildir "/kloess@digital-worx.de/asvin" :key ?v)
                                             (:maildir "/kloess@digital-worx.de/kohlhammer" :key ?k)
                                             (:maildir "/kloess@digital-worx.de/Porsche" :key ?p)
                                             (:maildir "/kloess@digital-worx.de/privileg" :key ?o)
                                             (:maildir "/kloess@digital-worx.de/Sent" :key ?s)
                                             (:maildir "/kloess@digital-worx.de/Wafios" :key ?w)))
                    (mu4e-bookmarks .
                                    ((:name "Unread digital-worx" :query "m:/kloess@digital-worx.de/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                     (:name "Today's messages digital-worx" :query "date:today..now" :key ?t)
                                     (:name "Last 7 days digital-worx" :query "date:7d..now" :hide-unread t :key ?w)
                                     (:name "Messages with calendar files digital-worx" :query "m:/kloess@digital-worx.de/ mime:text/calendar" :key ?i)
                                     (:name "Messages with attachments digital-worx" :query "m:/kloess@digital-worx.de/ flag:attach" :key ?a)
                                     (:name "Messages with images digital-worx" :query "m:/kloess@digital-worx.de/ mime:image/*" :key ?p)))))

           (make-mu4e-context
            :name "schule"
            :enter-func (lambda ()
                          (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
                            (revert-buffer)))
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/karsten.kloess@its-stuttgart.de" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "karsten.kloess@its-stuttgart.de")
                    (user-full-name    . "Karsten Klöss")
                    (mu4e-drafts-folder  . "/karsten.kloess@its-stuttgart.de/Drafts")
                    (mu4e-sent-folder  . "/karsten.kloess@its-stuttgart.de/Sent")
                    (mu4e-refile-folder  . "/karsten.kloess@its-stuttgart.de/Archiv")
                    (mu4e-trash-folder  . "/karsten.kloess@its-stuttgart.de/Trash")
                    (mu4e-maildir-shortcuts .
                                            ((:maildir "/karsten.kloess@its-stuttgart.de/INBOX" :key ?i)
                                             (:maildir "/karsten.kloess@its-stuttgart.de/Archiv" :key ?a)
                                             (:maildir "/karsten.kloess@its-stuttgart.de/Trash" :key ?t)
                                             (:maildir "/karsten.kloess@its-stuttgart.de/Drafts" :key ?d)
                                             (:maildir "/karsten.kloess@its-stuttgart.de/Junk" :key ?j)
                                             (:maildir "/karsten.kloess@its-stuttgart.de/Sent" :key ?s)))
                    (mu4e-bookmarks .
                                    ((:name "Unread Schule" :query "m:/karsten.kloess@its-stuttgart.de/ AND flag:unread AND NOT flag:trashed" :key ?u)
                                     (:name "Today's messages Schule" :query "date:today..now" :key ?t)
                                     (:name "Last 7 days Schule" :query "date:7d..now" :hide-unread t :key ?w)
                                     (:name "Messages with attachments Schule" :query "m:/karsten.kloess@its-stuttgart.de/ flag:attach" :key ?a)
                                     (:name "Messages with images Schule" :query "m:/karsten.kloess@its-stuttgart.de/ mime:image/*" :key ?p))))))))

#+end_src

** org-mime

#+begin_src emacs-lisp

  (use-package org-mime
    :ensure t
    :config
    (setq org-mime-export-options '(:section-numbers nil
                                                     :with-author nil
                                                     :with-toc nil))
    (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
    (add-hook 'org-mime-html-hook
              (lambda nil
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#f6f6f6" "#2f3337")))))

#+end_src

* Calendar

#+begin_src emacs-lisp

  (use-package calfw
    :disabled
    :commands cfw:open-org-calendar
    :config
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓)

    (use-package calfw-org
      :config
      (setq cfw:org-agenda-schedule-args '(:timestamp)))
    (use-package calfw-cal)

    (defun kk/open-calendar ()
      (interactive)
      (cfw:open-calendar-buffer
       :contents-sources
       (list
        (cfw:org-create-source "Green")
        (cfw:cal-create-source "Orange")))))

#+end_src

* Passwords

#+begin_src emacs-lisp

  (use-package password-store)

  (use-package password-store-otp)

  (use-package pass)

  (use-package auth-source-pass
    :defer 0
    :config
    (setq auth-sources '(password-store))
    (auth-source-pass-enable))

#+end_src

* Restoring
** winner-mode
#+begin_src emacs-lisp

  (winner-mode)

#+end_src

** desktop-save-mode

#+begin_src emacs-lisp

  (defun kk/switch-desktop ()
    (interactive)
    ;; If save-silently-p is non-nil, saves all the file-visiting buffers
    ;;  without querying the user.
    (let ((save-silently nil))
      (save-some-buffers save-silently))
    (desktop-change-dir (read-directory-name "Change to directory: ")))

  (setq desktop-files-not-to-save "^$" ; reload tramp buffers
        desktop-auto-save-timeout 30)

  (desktop-save-mode 1)

#+end_src

* Custom Solutions
** Link Handler

Using my standard opener script [[https://github.com/tenklo/dotfiles/blob/master/.local/bin/o][o]], e.g. to open video links in mpv.
Invoke by browse-url-generic

#+begin_src emacs-lisp

  (setq browse-url-generic-program
        (executable-find "o"))

#+end_src

** Todays date for Daily Standup notes

#+begin_src emacs-lisp

  (defun insert-todays-date-headline-standup () (interactive)
         (insert (shell-command-to-string "echo -n \"* $(LC_ALL=de_DE.utf8 date '+%A %d. %B %Y')\"")))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
