#+TITLE: Clean Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* About

This configuration aims to be simple, while still providing everything
I need. It should work across different devices, but provide only data
the individual device needs.

* General

** Startup Performance
:PROPERTIES:
:ID:       f4bea356-d5e1-4235-8110-381c0123e894
:END:

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Package System
:PROPERTIES:
:ID:       c8c6f928-3490-42ce-abfc-8858a1905f9f
:END:

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)
(setq use-package-verbose t)
#+end_src

** Aliases
:PROPERTIES:
:ID:       70553041-474f-4e9b-908d-bc5073359a77
:END:

#+begin_src emacs-lisp
(define-obsolete-function-alias 'string-to-int 'string-to-number "22.1")
#+end_src

** Auto Reverting
:PROPERTIES:
:ID:       01cb8b21-9528-4a0e-b1da-c5f06e5598fe
:END:

#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode)
#+end_src

** Movement

*** Move Where I Mean Package
:PROPERTIES:
:ID:       df185c2f-c1cc-4921-840c-3c444ff07e46
:END:

#+begin_src emacs-lisp
(use-package mwim
  :config
  (global-set-key (kbd "C-a") 'mwim-beginning)
  (global-set-key (kbd "C-e") 'mwim-end-of-line-or-code))   ; lala
#+end_src

* System Specific

** Declarations
:PROPERTIES:
:ID:       1443235a-a748-4b0e-82f6-974bfa2c3dae
:END:

#+begin_src emacs-lisp
(defvar kk/default-font-size 150)
(defvar kk/org-refile-target "")
(defvar kk/journal-file "")
#+end_src

** Allocations
:PROPERTIES:
:ID:       d6e46e0c-4556-4475-b0dd-8653b9d5beb9
:END:

#+begin_src emacs-lisp
(pcase system-name
  ("dwhpd"
   (setq kk/default-font-size 140)
   (setq org-agenda-files '("~/nextcloud_work/Documents/org"))
   (setq kk/org-refile-target "~/nextcloud_work/Documents/org/refile.org")
   (setq kk/journal-file "~/nextcloud_work/Documents/org/journal.org"))
  ("T490s"
   (setq kk/default-font-size 180)
   (setq org-agenda-files '("~/nextcloud_work/Documents/org"
                            "~/Nextcloud/Documents/org"))
   (setq org-agenda-diary-file "~/Nextcloud/Documents/org/diary.org")
   (setq kk/org-refile-target "~/nextcloud_work/Documents/org/refile.org")
   (setq kk/journal-file "~/Nextcloud/Documents/org/journal.org.gpg")))
#+end_src

* Org

** General
:PROPERTIES:
:ID:       74852722-8797-415d-bc25-74e9a153b9e4
:END:

#+begin_src emacs-lisp
(defun kk/org-mode-setup ()
  "Set org-specific settings.
Intended to be used in an `org-mode-hook'."
  (visual-line-mode 1)
  (setq prettify-symbols-alist '(("[ ]" . "")
                                 ("[X]" . "")
                                 ("[-]" . "")
                                 ("#+begin_src" . "")
                                 ("#+end_src" . "―")))
  (prettify-symbols-mode)
  (setq-local display-line-numbers-type t))

(use-package org
  :hook (org-mode . kk/org-mode-setup)
  :config
  (setq initial-major-mode 'org-mode)

  (setq org-startup-folded 'fold)

  (setq org-image-actual-width 500)

  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-enforce-todo-dependencies t)
  (setq org-track-ordered-property-with-tag t)

  (setq org-global-properties
        `(("Effort_ALL" .
           ,(concat "0 0:10 0:20 0:30 0:45 1:00 1:30 2:00 3:00 "
                    "6:00"))))
  (setq org-columns-default-format
        (concat "#+COLUMNS: %7CATEGORY(Cat.) %7TODO(Todo) %40ITEM(Task) %TAGS(Tag) "
                "%6CLOCKSUM(Clock) %6EFFORT(Effort){:}")))
#+end_src

*** Todo Keywords
:PROPERTIES:
:ID:       74a4e252-878c-4a63-bfec-bd3f3615cd23
:END:

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t!/!)" "NEXT(n!/!)" "|" "DONE(d!/!)")
        (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "CANC(k@/!)" "PHONE" "MEETING")))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "slate blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAIT" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANC" :foreground "forest green" :weight bold))))

(setq org-todo-state-tags-triggers
      (quote (("CANC" ("CANCELLED" . t))
              ("WAIT" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

*** Indentation
:PROPERTIES:
:ID:       85461031-c9d3-4146-8847-191bd47f97bf
:END:

#+begin_src emacs-lisp
(setq org-indent-indentation-per-level 3)
(setq org-edit-src-content-indentation 0)
(setq org-startup-indented t)
#+end_src

*** Refiling
:PROPERTIES:
:ID:       a2b00b99-bd7b-4e59-8a36-2aa3403d8e94
:END:

#+begin_src emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 9)))

(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)

(advice-add 'org-refile :after
            (lambda (&rest _)
              (org-save-all-org-buffers)))
#+end_src

*** Logging
:PROPERTIES:
:ID:       3cec1cc3-4108-4da2-b226-b6280fffa9b3
:END:

#+begin_src emacs-lisp
(setq org-log-done 'note)
(setq org-log-reschedule 'note)
(setq org-log-into-drawer t)
#+end_src

*** Clocking
:PROPERTIES:
:ID:       fc4b200f-b33c-4b66-8804-410e208d758d
:END:

#+begin_src emacs-lisp
(setq org-clock-into-drawer "CLOCKING")
(setq org-clock-history-length 35)
#+end_src

**** Pomodoro
:PROPERTIES:
:ID:       0cdbe69c-6b00-469d-ad5b-d9c48a714cb8
:END:

#+begin_src emacs-lisp
(use-package org-pomodoro)
#+end_src

*** Babel
:PROPERTIES:
:ID:       f3f22b11-bb68-4b6f-a84f-be1f24788fc2
:END:

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

*** Org ID
:PROPERTIES:
:ID:       6832e9be-653e-4411-83c9-4993e4439e45
:END:

#+begin_src emacs-lisp
(require 'org-id)
(setq org-id-link-to-org-use-id t)
#+end_src

*** Contrib
:PROPERTIES:
:ID:       d6b6e0d2-ef08-441a-bdea-4e27f1da8ce8
:END:

#+begin_src emacs-lisp
(use-package org-contrib)
#+end_src

**** Org Checklist
:PROPERTIES:
:ID:       2558d47c-c070-4777-a90e-ef30c6e5043c
:END:

#+begin_src emacs-lisp
(require 'org-checklist)
#+end_src

** Agenda

*** Settings
:PROPERTIES:
:ID:       7fa5111d-0a34-4f53-b45d-9ea5fe1340db
:END:

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks 't)
(setq org-sort-agenda-noeffort-is-high t)

(add-hook 'org-agenda-mode-hook 'hl-line-mode)

(setq org-agenda-text-search-extra-files '(agenda-archives))

;; Use sticky agenda's so they persist
(setq org-agenda-sticky t)
#+end_src

*** Custom Agenda Commands
:PROPERTIES:
:ID:       7aecd838-676f-4250-812e-2a80cbfcaf99
:END:

#+begin_src emacs-lisp
(setq kk/org-agenda-stuck-projects
      '(tags-todo "-CANCELLED-HOLD/!"
                  ((org-agenda-skip-function 'bh/skip-non-stuck-projects)
                   (org-tags-match-list-sublevels 'indented)
                   (org-agenda-overriding-header "Stuck Projects")
                   (org-agenda-todo-ignore-scheduled))))

(setq org-agenda-custom-commands
      `(("A" agenda*)
        ("d" "Deadlines"
         ((agenda ""
                  ((org-deadline-warning-days 365)
                   (org-agenda-span 1)

                   (org-agenda-sorting-strategy
                    '((agenda habit-down deadline-up time-up
                              category-up todo-state-up)))
                   (org-agenda-show-all-dates nil)))
          (agenda ""
                  ((org-agenda-span 'year)
                   (org-deadline-warning-days 0))))
         ((org-agenda-start-with-log-mode nil)
          (org-agenda-include-diary nil)
          (org-agenda-entry-types '(:deadline))))

        ("f" . "Finances")
        ("ft" "to track"
         ((tags-todo "financetotrack"
                     ((org-agenda-overriding-header "Track these payments")))))
        ("fp" "to pay"
         ((tags-todo "financetopay"
                     ((org-agenda-overriding-header "Pay these"))))
         ((org-agenda-view-columns-initially t)))
        ("fw" "wait for payment"
         ((tags-todo "financeawaiting"
                     ((org-agenda-overriding-header "Waiting for these payments"))))
         ((org-agenda-view-columns-initially t)))

        (" " "Agenda"
         ((agenda ""
                  ((org-agenda-span 1)
                   (org-agenda-skip-timestamp-if-done t)
                   (org-agenda-skip-deadline-if-done t)
                   (org-agenda-skip-scheduled-if-done t)))
          (tags-todo "refile"
                     ((org-agenda-overriding-header "Tasks to Refile")
                      (org-tags-match-list-sublevels nil)))
          (tags-todo "+TODO=\"WAIT\""
                     ((org-agenda-overriding-header "Unscheduled Waits")
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled 'all)))
          ,kk/org-agenda-stuck-projects
          (tags-todo "-HOLD-CANCELLED/!"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function 'bh/skip-non-projects)
                      (org-tags-match-list-sublevels 'indented)
                      (org-agenda-sorting-strategy
                       '(category-keep))))
          (tags-todo "-CANCELLED/!NEXT"
                     ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                      (org-tags-match-list-sublevels t)
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy
                       '(todo-state-down effort-up category-keep))))
          (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                     ((org-agenda-overriding-header (concat "Project Subtasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'bh/skip-non-project-tasks)
                      (org-agenda-tags-todo-honor-ignore-options t)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy
                       '(category-keep))))
          (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                     ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'bh/skip-project-tasks)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy
                       '(todo-state-down category-keep))))
          (tags-todo "-CANCELLED&+HOLD|-CANCELLED&+WAITING/!"
                     ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                            (if bh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'bh/skip-non-tasks)
                      (org-tags-match-list-sublevels nil)
                      (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
          (tags "-REFILE/"
                ((org-agenda-overriding-header "Tasks to Archive")
                 (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                 (org-tags-match-list-sublevels nil))))
         ((org-agenda-compact-blocks t)
          (org-agenda-dim-blocked-tasks nil)))))
#+end_src

** Capture Templates
:PROPERTIES:
:ID:       50b809d1-3266-49a1-8e99-b5a874f84339
:END:

#+begin_src emacs-lisp
(define-key global-map (kbd "C-c j")
  (lambda () (interactive) (org-capture nil)))

(setq org-capture-templates
      `(("t" "Task" entry (file kk/org-refile-target)
         "* TODO %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
         :empty-lines 0)

        ("f" "Finances")
        ("ft" "to track" entry (file kk/org-refile-target)
         "* TODO Expense: %?\n :LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
         :empty-lines 0)
        ("fp" "to pay" entry (file kk/org-refile-target)
         "* TODO %?\n :PROPERTIES:\n:PAYEE: %^{PAYEE}\n:AMOUNT: %^{AMOUNT}\n:END:\n:LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
         :empty-lines 0)
        ("fw" "awaiting payment" entry (file kk/org-refile-target)
         "* WAIT %?\n :PROPERTIES:\n:DEBTOR: %^{DEBTOR}\n:AMOUNT: %^{AMOUNT}\n:END:\n:LOGBOOK:\n - Added: %U\n :END:\n  %a\n  %i"
         :empty-lines 0)

        ("j" "Journal" entry
         (file+olp+datetree kk/journal-file)
         "\n* %<%H:%M> Uhr\n\n%?\n\n"
         :clock-in :clock-resume :empty-lines 1)

        ("mb" "Books" entry
         (file kk/org-refile-target)
         "* TODO %^{Description}\n:PROPERTIES:\n:PAGES: %^{Pages}\n:GENRE: %^{Genre}\n:RECOMMENDED: %^{Recommended By}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
        ("mm" "Movies" entry
         (file kk/org-refile-target)
         "* TODO %^{Description}\n:PROPERTIES:\n:LENGTH: %^{Length}\n:GENRE: %^{Genre}\n:RECOMMENDED: %^{Recommended By}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
        ("ms" "TV Shows" entry
         (file kk/org-refile-target)
         "* TODO %^{Description}\n:PROPERTIES:\n:SEASONS: %^{Seasons}\n:GENRE: %^{Genre}\n:RECOMMENDED: %^{Recommended By}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")

        ("m" "Media")))
#+end_src

** Structure Templates
:PROPERTIES:
:ID:       7ce3f595-e2d7-4fe3-915c-e425069e751f
:END:

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Keybindings
:PROPERTIES:
:ID:       7d58f47e-cee0-4873-87d1-94284520157a
:END:

#+begin_src emacs-lisp
(global-set-key (kbd "<f12>") 'org-agenda)

(global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** Font And Display
:PROPERTIES:
:ID:       7084e52f-9183-4ee7-ad73-a2585570a273
:END:

#+begin_src emacs-lisp
(defun kk/org-font-setup ()
  "Set `org-mode' specific font settings."
  (interactive)
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1)
                                                          (match-end 1) "•"))))))
  (prettify-symbols-mode))

(setq org-list-demote-modify-bullet (quote (("+" . "-")
                                            ("*" . "-")
                                            ("1." . "-")
                                            ("1)" . "-")
                                            ("A)" . "-")
                                            ("B)" . "-")
                                            ("a)" . "-")
                                            ("b)" . "-")
                                            ("A." . "-")
                                            ("B." . "-")
                                            ("a." . "-")
                                            ("b." . "-"))))

(setq org-ellipsis " ⤵")

(use-package org-bullets
  :after org
  :hook
  (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Bernt Hansen code snippets
:PROPERTIES:
:ID:       a2c9914f-362f-48c2-960d-0f852ce466a6
:END:

#+begin_src emacs-lisp
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(setq kk/stuck-projects-regexp "^\\*+ NEXT")
(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward kk/stuck-projects-regexp subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward kk/stuck-projects-regexp subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

;;;; Refile settings
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+end_src

** Habits
:PROPERTIES:
:ID:       c642846e-ca64-4690-9127-c499d2e939ab
:END:

#+begin_src emacs-lisp
(setq org-habit-show-habits-only-for-today nil)
(setq org-habit-completed-glyph ?X)
(setq org-habit-today-glyph ?)
(setq org-habit-graph-column 53)

                                        ; When deactivating habit display via 'K', pull them up again on the next day
(run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
#+end_src

* Development

** Magit
:PROPERTIES:
:ID:       a9ef789b-24c9-4caf-a4bb-3152b073becd
:END:

#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src

** Parenthesis

*** Rainbow Delimiters
:PROPERTIES:
:ID:       96a5d5e7-2058-44cb-ba58-98158c6b89bf
:END:

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Show-Paren-Mode
:PROPERTIES:
:ID:       3cdc25e8-501b-465c-8f8a-96d3009f09b0
:END:
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

*** Smartparens
:PROPERTIES:
:ID:       1e23f124-2a25-4c9a-916e-29758dcd8277
:END:
#+begin_src emacs-lisp
(use-package smartparens
  :defer t
  :hook (prog-mode . smartparens-mode)
  :config
  (require 'smartparens-config))
#+end_src

* File Management

** Dired
:PROPERTIES:
:ID:       919bb05a-59a8-48b1-9cd9-93504a3db3c3
:END:

#+begin_src emacs-lisp
(use-package dired
  :straight nil
  :bind
  (("C-x C-j" . dired-jump))
  :custom
  ((dired-listing-switches "-Alh --group-directories-first"))
  :hook
  (dired-mode . dired-hide-details-mode)
  :config
  (bind-key "." 'kk/dired-dotfiles-toggle 'dired-mode-map)
  (define-key dired-mode-map (kbd "C-c o") 'kk/dired-open-file))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(defun kk/dired-dotfiles-toggle ()
  "Show/hide dot-files"
  (interactive)
  (when (equal major-mode 'dired-mode)
    (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
        (progn
          (set (make-local-variable 'dired-dotfiles-show-p) nil)
          (message "h")
          (dired-mark-files-regexp "^\\\.")
          (dired-do-kill-lines))
      (progn (revert-buffer) ; otherwise just revert to re-show
             (set (make-local-variable 'dired-dotfiles-show-p) t)))))

(defun kk/dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))
#+end_src

* Misc
:PROPERTIES:
:ID:       47749c3b-b6dd-4f7e-a698-89940e464b91
:END:

** Tidy Buffer
:PROPERTIES:
:ID:       9e07d209-3745-4c07-9c10-f1c02cffa3c0
:END:
#+begin_src emacs-lisp
(defun kk/tidy-buffer ()
  "Indent and tidy up the current buffer.
Delete trailing whitespace via `delete-trailing-whitespace', apply indentation via `indent-region', remove tabs via `untabify' and move point back to where we started."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace)))
#+end_src

** Calendar

*** German Holidays
:PROPERTIES:
:ID:       510db8be-f33a-4d18-8b6e-8e9751b71f0b
:END:

This section is based on [[https://www.emacswiki.org/emacs/CalendarLocalization#h5o-32][this]] entry in the emacs wiki.

#+begin_src emacs-lisp
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-bahai-holidays nil)
(setq holiday-oriental-holidays nil)

(setq solar-n-hemi-seasons
      '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang"))

(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Neujahr")
        (holiday-fixed 5 1 "Tag der Arbeit")
        (holiday-fixed 10 3 "Tag der Deutschen Einheit")))

;; Feiertage für Baden-Württemberg, weitere auskommentiert
(setq holiday-christian-holidays
      '((holiday-float 12 0 -4 "1. Advent" 24)
        (holiday-float 12 0 -3 "2. Advent" 24)
        (holiday-float 12 0 -2 "3. Advent" 24)
        (holiday-float 12 0 -1 "4. Advent" 24)
        (holiday-fixed 12 25 "1. Weihnachtstag")
        (holiday-fixed 12 26 "2. Weihnachtstag")
        (holiday-fixed 1 6 "Heilige Drei Könige")
        ;; (holiday-easter-etc -48 "Rosenmontag")
        ;; (holiday-easter-etc -3 "Gründonnerstag")
        (holiday-easter-etc  -2 "Karfreitag")
        (holiday-easter-etc   0 "Ostersonntag")
        (holiday-easter-etc  +1 "Ostermontag")
        (holiday-easter-etc +39 "Christi Himmelfahrt")
        (holiday-easter-etc +49 "Pfingstsonntag")
        (holiday-easter-etc +50 "Pfingstmontag")
        (holiday-easter-etc +60 "Fronleichnam")
        ;; (holiday-fixed 8 15 "Mariae Himmelfahrt")
        (holiday-fixed 11 1 "Allerheiligen")
        ;; (holiday-float 11 3 1 "Buss- und Bettag" 16)
        (holiday-float 11 0 1 "Totensonntag" 20)))
#+end_src

* UI

** General
:PROPERTIES:
:ID:       20b847fc-991f-4607-9466-84453ddfd8ec
:END:

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(setq visible-bell t)
#+end_src

** Theme
:PROPERTIES:
:ID:       ffb701d8-a36e-4194-bd46-b8ae1777cdfe
:END:

#+begin_src emacs-lisp
(load-theme 'adwaita)
#+end_src

** Columns And Line Numbers
:PROPERTIES:
:ID:       5f4d3123-a3a6-423a-aee0-752c1fe060a1
:END:

#+begin_src emacs-lisp
(column-number-mode)

(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

(dolist (mode '(calendar-mode-hook
                ledger-report-mode-hook
                ledger-reconcile-mode-hook
                cfw:calendar-mode-hook
                image-mode-hook
                org-agenda-mode-hook
                doc-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Unicode Support
:PROPERTIES:
:ID:       293f1ee7-6737-4e9b-866b-11e59829e2bb
:END:

#+begin_src emacs-lisp
(use-package unicode-fonts)
(use-package all-the-icons)
#+end_src

** Helm
:PROPERTIES:
:ID:       435befc9-85d3-4c08-8f89-b2356a88eeca
:END:

#+begin_src emacs-lisp
(use-package helm
  :config
  (require 'helm-config)
  :init
  (helm-mode 1)
  :bind
  (("M-x"     . helm-M-x) ;; run functions
   ("M-s s"   . helm-occur-from-isearch)
   ("C-x C-f" . helm-find-files) ;; open or create files
   ("C-x b"   . helm-mini) ;; selct buffers
   ("C-x C-r" . helm-recentf) ;; select recently saved files
   ("C-c i"   . helm-imenu) ;; select heading
   ("M-y"     . helm-show-kill-ring) ;; show the kill ring
   :map helm-map
   ("C-z" . helm-select-action)
   ("<tab>" . helm-execute-persistent-action)))
#+end_src

** Helpful
:PROPERTIES:
:ID:       204dc542-3e93-4077-8a47-acc90f8510e8
:END:

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-descrive-variable-function #'helpful-variable)
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))
#+end_src

** Font Configuration
:PROPERTIES:
:ID:       c83260d7-f416-4dbc-b0d1-6df254a74017
:END:

#+begin_src emacs-lisp
(defun kk/set-font-faces ()
  "Set font faces.
This function can be called to set the faces after making a frame,
in case Emacs daemon is used."
  (message "Settings faces!")
  (set-face-attribute 'default nil :height kk/default-font-size))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (kk/set-font-faces)
                  (kk/org-font-setup)
                  (unicode-fonts-setup))))
  (kk/set-font-faces)
  (kk/org-font-setup)
  (unicode-fonts-setup))
#+end_src

** Which Key
:PROPERTIES:
:ID:       b7c93b91-3d33-4889-8846-5e1637eae405
:END:

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))
#+end_src

* Customization Through Emacs
:PROPERTIES:
:ID:       fc347ba8-aa03-4cf1-93fd-511ae20b28d1
:END:

Make =M-x customize= persistent.

#+begin_src emacs-lisp
(custom-set-variables
 '(calendar-date-style 'iso)
 '(initial-scratch-message "* Scratch



,* Pomodoros
")
 '(grep-find-template
   "find <D> <X> -type f <F> -exec grep <C> -n -I --null -e <R> /dev/null \\{\\} +")
 '(grep-template "grep <X> <C> -n -I --null -e <R> <F>")
 '(org-modules
   '(ol-bbdb ol-bibtex ol-docview ol-eww ol-gnus org-habit ol-info ol-irc ol-mhe ol-rmail ol-w3m)))
#+end_src

* Runtime Performance
:PROPERTIES:
:ID:       b1f0f902-230b-4db1-9b12-571e84c57cb4
:END:

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
